#!/usr/bin/env perl
use bignum;
use strict;
use warnings;
use feature qw(say);
use List::Util;
use YAML::Syck;
use Data::Dumper;
use Net::Twitter::Lite::WithAPIv1_1;
use JSON;

sub get_filename {
	my ($name) = @_;

	$ENV{HOME}."/Backup/tweets".($name ? "-".$name : "").".json";
}

our $twitter;

sub load_secrets {
	open(my $fh, "<", $ENV{HOME}."/.trc");
	my $conf = Load(eval {local $/; <$fh>});
	close($fh);

	my ($user, $key) = @{$conf->{configuration}{default_profile}};
	my $profile = $conf->{profiles}{$user}{$key};

	return (username	=> $user,
		consumer_key	=> $key,
		consumer_secret	=> $profile->{consumer_secret},
		access_token	=> $profile->{token},
		access_secret	=> $profile->{secret});
}

sub init_api {
	my %secrets = load_secrets();

	$twitter = Net::Twitter::Lite::WithAPIv1_1->new(
			username	=> $secrets{username},
			consumer_key	=> $secrets{consumer_key},
			consumer_secret	=> $secrets{consumer_secret});

	$twitter->access_token($secrets{access_token});
	$twitter->access_token_secret($secrets{access_secret});

	return $twitter;
}

sub fetch_entire_timeline {
	# start with latest
	# repeat with max_id = lowest id from previous fetch

	my @tweets;
	my %seen;
	my $next_max_id;

	say "Downloading entire timeline (latest to oldest)";

	while (1) {
		my %params = (
			count		=> "200",
			exclude_replies	=> "false",
			include_rts	=> "true",
		);

		my $msg = "Downloading $params{count} tweets";
		if (defined $next_max_id) {
			$params{max_id} = $next_max_id;
			$msg .= " up to $params{max_id}";
		}
		say $msg;

		my $timeline = eval {$twitter->user_timeline(\%params)};
		if (!$timeline) {
			warn "Failure: $@\n"; sleep 1; redo;
		}

		say "Received ".scalar(@$timeline)." tweets.";
		last if !@$timeline;

		my $min_id = $timeline->[-1]->{id_str};
		my $max_id = $timeline->[0]->{id_str};
		say "  newest: $max_id";
		say "  oldest: $min_id";

		# timeline is sorted newest → oldest
		my @new = grep {!$seen{$_->{id_str}}++} @$timeline;
		last if !@new;
		push @tweets, @new;

		$next_max_id = $min_id;
	}

	@tweets = reverse @tweets;
	return \@tweets;
}

sub fetch_tweets_since {
	# start with oldest since_id
	# repeat with since_id = highest id from previous fetch

	my @tweets;
	my %seen;
	my $next_since_id = shift;

	say "Downloading tweets since $next_since_id to latest";

	while (1) {
		my %params = (
			count		=> "200",
			exclude_replies	=> "false",
			include_rts	=> "true",
		);

		my $msg = "Downloading $params{count} tweets";
		if (defined $next_since_id) {
			$params{since_id} = $next_since_id;
			$msg .= " since $params{since_id}"
		}
		say $msg;

		my $timeline = eval {$twitter->user_timeline(\%params)};
		if (!$timeline) {
			warn "Failure: $@\n"; sleep 1; redo;
		}

		say "Received ".scalar(@$timeline)." tweets.";
		last if !@$timeline;

		my $min_id = $timeline->[-1]->{id_str};
		my $max_id = $timeline->[0]->{id_str};
		say "  newest: $max_id";
		say "  oldest: $min_id";

		# timeline is sorted newest → oldest
		my @new = grep {!$seen{$_->{id_str}}++} @$timeline;
		last if !@new;
		push @tweets, @new;

		$next_since_id = $max_id;
	}

	@tweets = reverse @tweets;
	return \@tweets;
}

sub fetch_all_favourites {
	my @tweets;
	my $page = 1;

	say "Downloading all favorites";
	while (1) {
		my %params = (
			page	=> "$page",
		);
		$page++;

		print "Downloading page $params{page}... "; $|++;

		my $statuses = eval {$twitter->favorites(\%params)};
		if (!$statuses) {
			warn "Failure: $@\n"; sleep 1; redo;
		}

		say "Received ".scalar(@$statuses)." tweets.";
		last if !@$statuses;

		#my @new = grep {!$seen{$_->{id_str}}++} @$timeline;
		#last if !@new;
		#push @tweets, @new;
		push @tweets, @$statuses;
	}

	@tweets = reverse @tweets;
	return \@tweets;
}

sub store_tweets {
	my ($tweets, $name) = @_;

	my $file = get_filename($name);
	print "Dumping ".scalar(@$tweets)." tweets to $file\n";
	if (open(my $f, ">", $file)) {
		print $f JSON->new->utf8->pretty->encode($tweets);
		close($f);
	} else {
		die "$!";
	}
}

sub load_tweets {
	my ($name) = @_;

	my $file = get_filename($name);
	my $data;
	if (open(my $f, "<", $file)) {
		$data = eval {local $/; <$f>};
		close($f);
	} else {
		return undef;
	}
	my $tweets = JSON->new->utf8->decode($data);
	print "Loading ".scalar(@$tweets)." tweets from $file\n";

	return $tweets;
}

binmode STDOUT, ":utf8";
binmode STDERR, ":utf8";

$twitter = init_api();
my $mode = shift(@ARGV) // 'own';
my $tweets;

if ($mode eq 'own') {
	$tweets = load_tweets();
	if (defined $tweets) {
		my %seen = map {$_->{id_str} => 1} @$tweets;
		my $since = $tweets->[-1]{id_str};
		my $new = fetch_tweets_since($since);
		push @$tweets, grep {!$seen{$_->{id_str}}++} @$new;
	} else {
		$tweets = fetch_entire_timeline();
	}
	store_tweets($tweets);
} elsif ($mode eq 'favs') {
	$tweets = fetch_all_favourites();
	store_tweets($tweets, "favs");
}
