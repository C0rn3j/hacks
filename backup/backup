#!/usr/bin/env bash

. lib.bash || exit

progname_prefix=0

openlog() {
	local lock=~/Backup/.log/$1.log
	mkdir -p ${lock%/*}
	exec {fd}<>$lock
	flock -x -n $fd || {
		if read -r ldate lstatus < "$lock" || true; then
			lmsg="$lstatus on $ldate"
		else
			lmsg="status unknown"
		fi
		die "job $job is already running ($lmsg)"
	}
}

putlog() {
	echo "$(date -Isecond) $*" >&$fd
}

resetlog() {
	truncate -s 0 /dev/fd/$fd
	putlog "$*"
}

mounted:() {
	mountpoint -q "$1" || die "backup disk not mounted"
}

do_rsync() {
	local src=$1 dest=$2; shift 2

	local args=()

	if [[ $src == / || $src == ~/ ]]; then
		args+=(sudo)
	fi

	args+=(rsync "$src" "$dest"
		-aHAXvzh
		--info=progress2
		--delete-after
		--delete-excluded
		"$@")

	log "rsyncing $src -> $dest"
	# note: add -x to jobs instead of here
	"${args[@]}"; r=$?

	(( !r )) ||	# success
	(( r == 24 ))	# files vanished
}

local_rsync() {
	local src=$1

	case $src in
	$HOME/*) do_rsync "$src" "$b/${src#$HOME/}";;
	*)       do_rsync "$src" "$b/_root/${src#/}";;
	esac
}

do_pull() {
	local dir=$1 url=$(cd "$1" && git config remote.origin.url)

	log "pulling $url -> $dir"
	(cd "$dir" && git pull --ff-only origin)
}

do_unison() {
	log "running Unison profile '$1'"
	unison "$@" -auto -terse
}

do_kinit() {
	log "obtaining Kerberos tickets"
	k5start_base=$(mktemp -d /tmp/backup_XXXXXXXX)
	export KRB5CCNAME="FILE:${k5start_base}/krb5cc"
	k5start -K 15 -b -p "${k5start_base}/pid" -L -q "$@"
	trap 'do_kdestroy' EXIT
}

do_kdestroy() {
	if [ -e "$k5start_base/pid" ]; then
		kill $(< "${k5start_base}/pid")
		unset KRB5CCNAME
		rm -rf "$k5start_base"
	fi
}

if [[ ! $_inhibited ]]; then
	export _inhibited=$$
	debug "restarting under gnome-inhibit"
	exec gnome-inhibit \
		--who "backup" \
		--what "suspend" \
		--why "Performing a backup" \
		--always -- "$0" "$@"
fi

set -e

umask 077

debug "started with: '$*'"

b="/mnt/backup"

while [[ $1 ]]; do {

job=${1%/}; shift

case $job in
	--jobs)
		sed -rn '/^case \$job in$/,/^esac$/ { s/^\t(\S+)\)$/\1/p }' "$0"
		exit ;;
esac

openlog "$job"
resetlog "started"
log2 "running job '$job'"
t_begin=$(now)

fail=()

trap 'die "[$BASHPID] interrupted"' INT

case $job in
	push-hd)
		mounted: $b
		$0 local        || fail+=(local)
		$0 home-push-hd || fail+=(home-push-hd)
		$0 root-push-hd || fail+=(root-push-hd)
		sync
		;;
	home-push-hd)
		mounted: $b
		do_rsync ~/ $b/Home/ -FxP
		;;
	root-push-hd)
		mounted: $b
		do_rsync / $b/Root/ -FxP
		;;
	push-ukradius)
		do_rsync ~ ukradius:/backup/priv/$HOSTNAME-daily/home -FxP
		;;
	online)
		$0 twitter
		$0 servers
		$0 mail
		$0 irc
		$0 gale
		;;
	servers)
		homes=()
		roots=()

		for host in $(< ~/Backup/hosts.txt); do
			debug "parsing host: '$host'"
			if [[ $host == '#'* ]]; then
				continue
			fi
			until [[ $host == *[a-z0-9] ]]; do
				case $host in
				*!) host=${host%!}; roots+=($host);;
				esac
			done
			homes+=($host)
		done

		debug "running jobs"

		for host in ${homes[@]}; do
			$0 @$host || fail+=(@$host)
		done

		for host in ${roots[@]}; do
			$0 root@$host || fail+=(root@$host)
		done

		$0 nanobot || fail+=(nanobot)

		if mountpoint -q $b; then
			$0 fs1 || fail+=(fs1)
			$0 fs2 || fail+=(fs2)
		fi
		;;
	root@*)
		host=$job
		do_rsync $host:/ ~/Backup/Roots/${host#root@}/		\
			-f "merge $HOME/Backup/Roots/filter.global"	\
			-f "merge $HOME/Backup/Roots/filter.minimize"	\
			-F						\
			--one-file-system --fake-super			\
			;
		;;
	@*)
		host=${job#@}
		do_rsync $host: ~/Backup/Homes/$host/			\
			-f "merge $HOME/Backup/Homes/filter.global" -F	\
			;
		;;
	fs1)
		mounted: $b
		do_rsync ukradius:pub/fs1/ $b/Servers/fs1/		\
			-f "exclude,p /mirrors/rain"			\
			;
		;;
	fs2)
		mounted: $b
		do_rsync ns228507:pub/fs2/ $b/Servers/fs2/
		;;
	mail)
		host=wolke
		log "downloading mail (rsync)"
		do_rsync $host:Mail/      ~/Backup/Mail/$host/
		do_rsync $host:/srv/mail/ ~/Backup/Mail/$host-public/
		log "downloading mail (dsync backup)"
		dsync -R backup $host
		;;
	nanobot)
		do_rsync root@panther:/home/nanobot/ ~/Backup/Cluenet/nanobot/
		;;
	twitter)
		twitter-backup
		;;
	irc)
		do_rsync virgule:irclogs/ ~/Attic/Chatlogs/current/
		;;
	gale)
		mounted: $b
		do_rsync \
			ofb.net:'~jtr/glog/'			\
			$b/Attic/Galelogs/			\
			--exclude '/:glog.out'			\
			;
		do_rsync \
			ofb.net:'~egnor/etc/gale/auth/'		\
			$b/Attic/Loot/ofb.net/gale-pubkeys/	\
			--exclude 'tmp.*'			\
			;
		;;
	cluenet)
		#dir=$b/Backup/Cluenet
		dir=~/Backup/Cluenet

		do_kinit -f "$dir/backup.keytab" -u "grawity/backup@CLUENET.ORG"

		do_pull $dir/virgule/accounts/
		#do_pull $dir/radian/accounts/
		do_pull $dir/_ircd-config/
		#do_rsync \
		#	root@radian.cluenet.org:/backup/	\
		#	$dir/radian/backup/			\
		#	--exclude '/accounts/'			\
		#	;
		#do_rsync \
		#	root@radian.cluenet.org:/var/www/	\
		#	$dir/radian/www/			\
		#	--exclude '/main/cluewikicache/'	\
		#	;

		do_kdestroy
		;;
	grawpqi|nullkey)
		dir=/run/media/grawity/$job/
		mountpoint -q "$dir" || die "'$job' not mounted"
		do_rsync "$dir" ~/Backup/Devices/$job/
		;;
	local)
		do_rsync \
			/win/Users/Mantas/AppData/Roaming/Firestorm_x64/ \
			~/Backup/Games/SL/Firestorm_current/	\
			--exclude 'browser_profile'		\
			;
		;;
	*)
		die "unknown job '$job'"
		;;
esac

if (( ${#fail[@]} )); then
	_fail=${fail[*]}
	err "backup failed for ${_fail// /, }"
fi

t_end=$(now)
log "job '$job' finished in $(interval $[t_end-t_begin])"
resetlog "done"

}; done
