#!/usr/bin/env bash

. lib.bash || exit

progname_prefix=0

bvol=/mnt/backup
conf=~/Dropbox/Apps/.config/

lock_path=
lock_fd=
failed_jobs=()

take_lock() {
	local job=$1

	lock_path=$XDG_RUNTIME_DIR/nullroute.eu.org/backup/$1.lock
	mkdir -p "${lock_path%/*}"

	exec {lock_fd}<>$lock_path
	flock -x -n $lock_fd || {
		if read ldate < "$lock_path" || true; then
			lmsg="started on $(date -d "$ldate" +"%F %T")"
		else
			lmsg="status unknown"
		fi
		die "job $job is already running ($lmsg)"
	}
	echo "$(date -Isecond) $*" >&$lock_fd
}

drop_lock() {
	exec {lock_fd}<&-
	rm -f "$lock_path"
}

do_rsync() {
	local src=$1 dest=$2 rest=("${@:3}")

	local arg last args=()

	if [[ $src == / || $src == ~/ ]]; then
		args+=(sudo)
	fi

	# note: add -x to jobs instead of here
	args+=(rsync "$src" "$dest"
		-aHAXvzh
		--info=progress2
		--delete-after
		--delete-excluded)

	for arg in "${rest[@]}"; do
		if [[ $last == -f && $arg == @(merge|.)\ * ]]; then
			debug "processing '$arg'"
			if [[ -f ${arg#* } ]]; then
				args+=("$arg")
			else
				debug "merge file not found, replacing with /dev/null"
				args+=("merge /dev/null")
			fi
		else
			args+=("$arg")
		fi
		last=$arg
	done

	log "rsyncing $src -> $dest"

	"${args[@]}"; r=$?

	(( !r )) ||	# success
	(( r == 24 ))	# files vanished
}

do_pull() {
	local dir=$1
	local url=$(cd "$dir" && git config remote.origin.url)

	log "updating repo $dir (from $url)"
	(cd "$dir" && git pull --ff-only origin)
}

do_unison() {
	log "running Unison profile '$1'"
	unison "$@" -auto -terse
}

do_kinit() {
	log "obtaining Kerberos tickets"
	k5start_base=$(mktemp -d /tmp/backup_XXXXXXXX)
	export KRB5CCNAME="FILE:${k5start_base}/krb5cc"
	k5start -K 15 -b -p "${k5start_base}/pid" -L -q "$@"
	trap 'do_kdestroy' EXIT
}

do_kdestroy() {
	if [ -e "$k5start_base/pid" ]; then
		kill $(< "${k5start_base}/pid")
		unset KRB5CCNAME
		rm -rf "$k5start_base"
	fi
}

do_job() {
	$0 "$1" || { failed_jobs+=("$1"); false; }
}

if [[ ! $_inhibited ]]; then
	export _inhibited=$$
	debug "restarting under gnome-inhibit"
	exec gnome-inhibit \
		--always \
		--who "backup" \
		--what "suspend" \
		--why "Performing a backup" \
		-- "$0" "$@"
fi

set -e
umask 077
debug "started with: '$*'"

trap 'die "[$BASHPID] interrupted"' INT

while [[ $1 ]]; do
	job=${1%/}; shift

	take_lock "$job"
	log2 "running job '$job'"
	t_begin=$(now)

	case $job in
		push-hd)
			do_job local
			[[ -d ~/Dropbox ]] &&
				do_job dropbox-push-hd
			do_job home-push-hd
			do_job root-push-hd
			sync
			;;
		home-push-hd)
			do_rsync ~/ $bvol/Homes/$HOSTNAME/			\
				-f "merge $conf/rsync-filters/home_all"		\
				-f "merge $conf/rsync-filters/home_$HOSTNAME"	\
				-x -P
			;;
		dropbox-push-hd)
			[[ -d ~/Dropbox/Porn ]] ||
				die "Dropbox in selective sync mode?"
			do_rsync ~/Dropbox/ $bvol/Backup/Dropbox/ -x -P
			;;
		root-push-hd)
			do_rsync / $bvol/Roots/$HOSTNAME/			\
				-f "merge $conf/rsync-filters/root_all"		\
				-f "merge $conf/rsync-filters/root_$HOSTNAME"	\
				-x -P
			;;
		push-ukradius)
			do_rsync ~ ukradius:/backup/priv/$HOSTNAME-daily/home	\
				-f "merge $HOME/.rsync-filter-for-ukradius"	\
				-FxP
			;;
		online)
			do_job twitter
			do_job servers
			do_job mail
			do_job irc
			if mountpoint -q $bvol; then
				do_job gale
			fi
			;;
		servers)
			homes=()
			roots=()

			for host in $(< ~/Backup/hosts.txt); do
				debug "parsing host: '$host'"
				if [[ $host == '#'* ]]; then
					continue
				fi
				if [[ $host == *'!' ]]; then
					host=${host%!}
					roots+=($host)
				fi
				homes+=($host)
			done

			debug "running jobs"
			for host in ${homes[@]}; do
				do_job @$host
			done
			for host in ${roots[@]}; do
				do_job root@$host
			done
			do_job nanobot
			if mountpoint -q $bvol; then
				do_job fs1
			fi
			;;
		root@*)
			host=$job
			do_rsync $host:/ ~/Backup/Roots/${host#root@}/			\
				-f "merge $conf/rsync-filters/server_root_all"		\
				-f "merge $conf/rsync-filters/server_root_extra"	\
				-f "merge $conf/rsync-filters/server_root_$host"	\
				-F -x -P --fake-super					;
			;;
		@*)
			host=${job#@}
			do_rsync $host: ~/Backup/Homes/$host/				\
				-f "merge $conf/rsync-filters/home_all"			\
				-f "merge $conf/rsync-filters/home_$host"		\
				-f "merge $conf/rsync-filters/server_home_all"		\
				-f "merge $conf/rsync-filters/server_home_$host"	\
				-F -x -P						;
			;;
		fs1)
			do_rsync ukradius:pub/fs1/ $bvol/Backup/fs1/		\
				-f "exclude /mirrors/rain"			;
			;;
		mail)
			host=wolke
			log "downloading mail (rsync)"
			do_rsync $host:Mail/      ~/Backup/Mail/$host/
			do_rsync $host:/srv/mail/ ~/Backup/Mail/$host-public/
			log "downloading mail (dsync backup)"
			dsync -R backup $host
			;;
		nanobot)
			do_rsync root@panther:/home/nanobot/ ~/Backup/Cluenet/nanobot/
			;;
		twitter)
			twitter-backup
			;;
		irc)
			do_rsync virgule:irclogs/ ~/Attic/Chatlogs/current/
			;;
		gale)
			do_rsync \
				ofb.net:~jtr/glog/			\
				$bvol/Attic/Galelogs/			\
				-f "exclude :glog.out"			;
			do_rsync \
				ofb.net:~egnor/etc/gale/auth/		\
				$bvol/Attic/Loot/ofb.net/gale-pubkeys/	\
				-f "exclude tmp.*"			;
			;;
		cluenet)
			#dir=$bvol/Backup/Cluenet
			dir=~/Backup/Cluenet

			do_kinit -f "$dir/backup.keytab" -u "grawity/backup@CLUENET.ORG"
			do_pull $dir/virgule/accounts/
			do_pull $dir/_ircd-config/
			do_kdestroy
			;;
		local)
			do_job local@$HOSTNAME
			;;
		local@rain)
			do_rsync \
				/win/Users/Mantas/AppData/Roaming/Firestorm_x64/ 	\
				~/Backup/Games/SL/Firestorm_current/			\
				-f "exclude browser_profile"				;
			;;
		local@*)
			;;
		*)
			die "unknown job '$job'"
			;;
	esac

	if (( ${#failed_jobs[@]} )); then
		_fail=${failed_jobs[*]}
		err "backup failed for ${_fail// /, }"
	fi

	t_end=$(now)
	log "job '$job' finished in $(interval $[t_end-t_begin])"
	drop_lock
done
