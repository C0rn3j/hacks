#!/usr/bin/env bash

PATH=${base:=$HOME/code}/bin:$PATH

. lib.bash || exit

log() { printf "\033[32m=\033[m %s\033[m\n" "$*"; }

warn() { printf "\033[1;33mwarning:\033[m %s\033[m\n" "$*"; (( ++warnings )); }

err() { printf "\033[1;31merror:\033[m %s\033[m\n" "$*"; ! (( ++errors )); }

check-gpg-version() {
	$GPG --version | sed 's/gpg (GnuPG) //; q' | {
		IFS="." read -r major minor rest
		(( major >= 2 )) || (( major == 1 && minor >= 4 ))
	}
}

# check for necessary programs

errors=0
warnings=0

if have gpg2; then
	GPG=gpg2
else
	GPG=gpg
fi

wants=(
	crontab
	curl!
	gcc
	git!
	$GPG
	mailx
	perl!
)

for bin in ${wants[@]}; do
	case $bin in
	*!)	bin=${bin%!}
		have "$bin" || err  "$bin not installed";;
	*)	have "$bin" || warn "$bin not installed";;
	esac
done

(( errors ))   && exit 1
(( warnings )) && { confirm "continue with setup?" || exit 1; }

# set up dotfiles

warnings=0

cd ~/code

EMAIL=grawity@gmail.com

FQDN=$(bin/fqdn)

if [[ ! -d ~/bin ]]; then
	mkdir -p ~/bin
fi

if [[ ! -d ~/lib/dotfiles ]]; then
	log "cloning dotfiles.git"
	mkdir -p ~/lib
	git clone "https://github.com/grawity/dotfiles.git" ~/lib/dotfiles
fi

if [[ ! "$PREFIX" ]]; then
	log "installing dotfiles"
	~/lib/dotfiles/install
	. ~/.profile
fi

# fix location of ~/.local/man

if [[ -L "$PREFIX/man" ]]; then
	rm -f "$PREFIX/man"
	mkdir -p "$PREFIX/man"
fi

if [[ -L "$PREFIX/share/man" ]]; then
	true
elif [[ -d "$PREFIX/share/man" ]]; then
	log "moving manual pages"
	cp -alf "$PREFIX/share/man" "$PREFIX/"
	rm -rf "$PREFIX/share/man" "$PREFIX/man/index.db"
	ln -s "../man" "$PREFIX/share/man"
else
	mkdir -p "$PREFIX/share"
	ln -s "../man" "$PREFIX/share/man"
fi

# set up authorized_keys

if [[ ! -s ~/.ssh/authorized_keys ]]; then
	if ! have $GPG; then
		warn "skipping sshupdate: 'gpg' missing"
	elif ! check-gpg-version; then
		warn "skipping sshupdate: 'gpg' too old"
	else
		log "configuring sshupdate"
		security/update-authorized-keys -r
	fi
else
	log "authorized_keys exists"
fi

# set up dist/pull

if ! have crontab; then
	warn "not adding dist/pull: 'crontab' missing"
elif err=$(crontab -l 2>&1 >/dev/null) || [[ $err == "no crontab for $USER" ]]; then
	if ! crontab -l 2>/dev/null |
		egrep -qs "[[:space:]]ID=pull[[:space:]]|code/dist/pull"; then
		log "adding dist/pull to crontab"
		(crontab -l 2>/dev/null || true;
			echo -e '@daily\t~/code/dist/pull') | crontab -
	else
		log "dist/pull is in crontab"
	fi
else
	warn "unable to add dist/pull to crontab: '$err'"
fi

if [[ "$HOSTNAME" == "equal" ]]; then
	log "skipping .forward on this server"
elif [[ -s ~/.forward ]]; then
	log "mail is forwarded to $(sed 1q ~/.forward)"
else
	log "forwarding mail to $EMAIL"
	echo "$EMAIL" > ~/.forward

	if have /usr/lib/sendmail; then
		SENDMAIL=/usr/lib/sendmail
	elif have /usr/sbin/sendmail; then
		SENDMAIL=/usr/sbin/sendmail
	else
		SENDMAIL=sendmail
	fi

	if ! have $SENDMAIL; then
		warn "'sendmail' missing, skipping test mail"
	elif confirm "send test mail?"; then
		{
		echo "Subject: Test from $HOSTNAME"
		echo "Date: $(date "+%a, %d %b %Y %H:%M:%S %z")"
		echo "To: <$EMAIL>"
		echo ""
		echo "Test mail from $USER($UID) at $FQDN"
		} | $SENDMAIL -i "$EMAIL"
	fi
fi

if have perl && ! have cpanm; then
	if confirm "cpanminus missing, install?"; then
		dist/install-cpanm
	fi
fi

# set up misc

collect_url=git://nullroute.eu.org/trash.git
collect_ref=refs/collect/$HOSTNAME

if (
	t_file='100644 blob'
	b_collect=$(dist/collect | git mkobject)
	b_prepare=$(dist/prepare -v | git mkobject)
	b_tree=$(printf '%s %s %s\t%s\n' \
		$t_file $b_collect 'dist-collect' \
		$t_file $b_prepare 'dist-prepare' \
		| git mktree)
	b_commit=$(echo "System information about $FQDN" | git commit-tree $b_tree)
	git push --quiet $collect_url $b_commit:$collect_ref
); then
	log "collected system information in $collect_ref"
fi


wait
