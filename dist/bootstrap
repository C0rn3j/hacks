#!/usr/bin/env bash

have() { command -v "$1" >/dev/null; }

log() { printf "\033[32m=\033[m %s\033[m\n" "$*"; }

warn() { printf "\033[1;33mwarning:\033[m %s\033[m\n" "$*"; ((++warnings)); }

err() { printf "\033[1;31merror:\033[m %s\033[m\n" "$*"; ! ((++errors)); }

confirm() {
	printf "\033[1;36m(?)\033[m %s " "$*"
	read -t 10 REPLY &&
	[[ $REPLY == 'y' ]]
}

check-gpg-version() {
	$GPG --version | sed 's/gpg (GnuPG) //; q' | {
		IFS="." read -r major minor rest
		(( major >= 2 )) || (( major == 1 && minor >= 4 ))
	}
}

# check for necessary programs

EMAIL=grawity@gmail.com

cd ~/code

errors=0
warnings=0

if have gpg2; then
	GPG=gpg2
else
	GPG=gpg
fi

wants=(
	crontab
	!curl
	gcc
	!git
	$GPG
	mailx
	!perl
)

for bin in ${wants[@]}; do
	case $bin in
	!*)	bin=${bin#!}
		have "$bin" || err  "$bin not installed";;
	*)	have "$bin" || warn "$bin not installed";;
	esac
done

((errors)) && exit 1
((warnings)) && { confirm "continue with setup?" || exit 1; }
warnings=0

FQDN=$(bin/fqdn)

# set up dotfiles

if [ ! -d ~/bin ]; then
	mkdir -p ~/bin
fi

if [ ! -d ~/lib/dotfiles ]; then
	log "cloning dotfiles.git"
	mkdir -p ~/lib
	git clone "git://github.com/grawity/dotfiles.git" ~/lib/dotfiles
fi

if [ ! "$PREFIX" ]; then
	log "installing dotfiles"
	(cd ~/lib/dotfiles && ./install)
	. ~/.profile
fi

# fix location of ~/.local/man

if [ -L "$PREFIX/man" ]; then
	rm -f "$PREFIX/man"
	mkdir -p "$PREFIX/man"
fi

if [ -L "$PREFIX/share/man" ]; then
	true
elif [ -d "$PREFIX/share/man" ]; then
	log "moving manual pages"
	cp -alf "$PREFIX/share/man" "$PREFIX/"
	rm -rf "$PREFIX/share/man" "$PREFIX/man/index.db"
	ln -s "../man" "$PREFIX/share/man"
else
	mkdir -p "$PREFIX/share"
	ln -s "../man" "$PREFIX/share/man"
fi

# install NullCA

if [ ! -f ~/.pki/ca/nullroute.pem ]; then
	log "installing CA certificates"
	mkdir -p ~/.pki/ca
	cp dist/nullroute.pem ~/.pki/ca/nullroute.pem
	if have c_rehash; then
		c_rehash ~/.pki/ca/ >/dev/null &
	fi
fi

# set up authorized_keys

if [ ! -s ~/.ssh/authorized_keys ]; then
	if ! have $GPG; then
		warn "skipping sshupdate: 'gpg' missing"
	elif ! check-gpg-version; then
		warn "skipping sshupdate: 'gpg' too old"
	else
		log "configuring sshupdate"
		security/update-authorized-keys -r
	fi
fi

# set up dist/pull

if ! have crontab; then
	warn "not adding dist/pull: 'crontab' missing"
elif err=$(crontab -l 2>&1 >/dev/null) || [[ $err == "no crontab for $USER" ]]; then
	if ! crontab -l 2>/dev/null |
		egrep -qs "[[:space:]]ID=pull[[:space:]]|code/dist/pull"; then
		log "adding dist/pull to crontab"
		(crontab -l 2>/dev/null || true;
			echo -e '@daily\t~/code/dist/pull') | crontab -
	fi
else
	warn "unable to add dist/pull to crontab: '$err'"
fi

if ! { have mailx && fgrep -qs NAILRC "$(which mailx)"; }; then
	confirm "heirloom-mailx missing, install?" && {
		log "installing heirloom-mailx"
		dist/install-mailx.sh
	}
fi

if [ "$HOSTNAME" == "equal" ]; then
	log "skipping .forward on this server"
elif [ -s ~/.forward ]; then
	log "mail is forwarded to $(sed 1q ~/.forward)"
else
	log "forwarding mail to $EMAIL"
	echo "$EMAIL" > ~/.forward

	if have /usr/lib/sendmail; then
		SENDMAIL=/usr/lib/sendmail
	elif have /usr/sbin/sendmail; then
		SENDMAIL=/usr/sbin/sendmail
	else
		SENDMAIL=sendmail
	fi

	if have $SENDMAIL; then
		log "sending a test mail"
		{
		echo "Subject: Test from $HOSTNAME"
		echo "Date: $(date "+%a, %d %b %Y %H:%M:%S %z")"
		echo "To: <$EMAIL>"
		echo ""
		echo "Test mail from $USER($UID) at $FQDN"
		} | $SENDMAIL -i "$EMAIL"
	else
		warn "'sendmail' missing, skipping test mail"
	fi
fi

if have perl && ! have cpanm; then
	confirm "cpanminus missing, install?" && {
		log "installing cpanminus"
		curl -Lk http://cpanmin.us | perl - --self-upgrade
	}
fi

wait
