#!/usr/bin/env bash
mail=grawity@gmail.com

have() { command -v "$1" >/dev/null; }

log() { printf "\e[32m=\e[m %s\e[m\n" "$*"; }

log_ok() { printf "\e[34m=\e[m %s\e[m\n" "$*"; }

warn() { printf "\e[1;33mwarning:\e[m %s\e[m\n" "$*"; ((++warnings)); }

err() { printf "\e[1;31merror:\e[m %s\e[m\n" "$*"; ((++errors)); false; }

die() { err "$@"; exit 1; }

confirm() {
	local msg=$1 ans=
	read -ep $'\001\e[1;36m\002(?)\001\e[m\002'" $msg " -t 10 ans && [[ $ans == y ]]
}

check-gpg-version() {
	local version major minor rest
	version=$(gpg --version | sed 's/gpg (GnuPG) //; q')
	IFS="." read -r major minor rest <<< "$version"
	(( major >= 2 )) || (( major == 1 && minor >= 4 ))
}

# check for necessary programs

export -f have
errors=0
warnings=0

PATH=~/code/bin:$PATH
cd ~/code

have gmake	&& make() { gmake "$@"; }
have gpg2	&& gpg() { gpg2 "$@"; }

wants=(
	crontab
	!curl
	gcc
	!git
	!gpg
	mailx
	!make
	perl
)

for bin in "${wants[@]}"; do
	case $bin in
	!*)	bin=${bin#!};
		have "$bin" || err  "$bin not installed";;
	*)	have "$bin" || warn "$bin not installed";;
	esac
done

((errors)) && exit 1
((warnings)) && { confirm "continue with setup?" || exit 1; }
warnings=0

# determine our FQDN

if have perl; then
	FQDN=$(fqdn)
elif have getent && f=$(getent hosts "$HOSTNAME" 2>/dev/null); then
	read _ FQDN _ <<< "$f"
elif have hostname && f=$(hostname -f 2>/dev/null); then
	FQDN=$f
else
	FQDN=$HOSTNAME
fi

# compile tools

if ! make -q; then
	log "building tools"
	make
fi

# set up dotfiles

if [[ ! -d ~/lib/dotfiles/.git ]]; then
	log "cloning dotfiles.git"
	mkdir -p ~/lib
	git clone "https://github.com/grawity/dotfiles.git" \
		~/lib/dotfiles
fi

if [[ -z $LOCAL ]]; then
	log "symlinking dotfiles"
	(cd ~/lib/dotfiles && ./install)
	. ~/.profile
fi

# fix location of ~/.local/man

if [[ -L $LOCAL/man ]]; then
	rm -f "$LOCAL/man"
	mkdir -p "$LOCAL/man"
fi

if [[ -L $LOCAL/share/man ]]; then
	true
elif [[ -d $LOCAL/share/man ]]; then
	log "moving manual pages"
	cp -alf "$LOCAL/share/man" "$LOCAL/"
	rm -rf "$LOCAL/share/man" "$LOCAL/man/index.db"
	ln -s "../man" "$LOCAL/share/man"
else
	mkdir -p "$LOCAL/share"
	ln -s "../man" "$LOCAL/share/man"
fi

# install NullCA

if [[ ! -f ~/.pki/ca/nullroute.pem ]]; then
	log "installing Nullroute CA certificate"
	mkdir -p -m 0700 ~/.pki/ca
	cp dist/nullroute.pem ~/.pki/ca/
	c_rehash ~/.pki/ca/ >/dev/null &
fi

# set up authorized_keys

if [[ ! -s ~/.ssh/authorized_keys ]]; then
	if have gpg && check-gpg-version; then
		log "enabling SSH key updates"
		security/update-authorized-keys -r
	else
		warn "unable to auto-update authorized_keys; gpg missing or too old"
	fi
fi

# set up k5login

if [[ ! -s ~/.k5login ]] && [[ -f /etc/krb5.keytab ]]; then
	log "creating ~/.k5login"
	security/update-k5login &
fi

# set up dist/pull

if ! have crontab; then
	warn "not adding dist/pull: \`crontab\` missing"
elif err=$(crontab -l 2>&1 >/dev/null) || [[ $err == "no crontab for $USER" ]]; then
	if ! crontab -l 2>/dev/null |
		grep -Eqs "[[:space:]]ID=pull[[:space:]]|code/dist/pull"; then
		log "adding dist/pull to crontab"
		(crontab -l 2>/dev/null || true;
			echo -e '@daily\tID=pull\t~/code/dist/pull') | crontab -
	fi
else
	warn "unable to add dist/pull to crontab: '$err'"
fi

if ! { have mailx && fgrep -qs NAILRC "$(which mailx)"; } &&
confirm "heirloom-mailx missing, install?"; then
	log "installing heirloom-mailx"
	dist/install-mailx.sh
fi

if [[ $FQDN == "equal.cluenet.org" ]]; then
	log_ok "skipping ~/.forward on the mail server"
elif [[ -s ~/.forward ]]; then
	log_ok "mail is being forwarded to $(sed 1q ~/.forward)"
else
	log "forwarding mail to $mail"
	echo "$mail" > ~/.forward
	if have mailx; then
		log "sending a test email"
		echo "Test email from $USER($UID) at $FQDN" \
			| mailx -s "Test from $HOSTNAME" "$mail"
	else
		warn "skipping test email: \`mailx\` missing"
	fi
fi

if have perl && ! have cpanm &&
confirm "cpanminus missing, install?"; then
	log "Installing cpanminus"
	curl -L http://cpanmin.us | perl - --self-upgrade
fi

wait
