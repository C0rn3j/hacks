#!/usr/bin/env bash
[ "$DEBUG" ] && set -x
set -e

have() { command -v "$1" >/dev/null; }

if [ -t 0 ]; then
	log() { msg=$*; printf "\033[32m=\033[m %s\033[m\n" "$*"; }
else
	log() { msg=$*; }
fi

silent() {
	local tmp=$(mktemp /tmp/pull.XXXXXX) rc=0
	if "$@" >"$tmp" 2>&1; then
		rc=0
	else
		rc=$?
		echo "error: command '$1' returned $rc"
		echo "= log: $msg"
		echo "= cwd: $PWD"
		echo "= args: $*"
		cat "$tmp"
	fi >&2
	rm -f "$tmp"
	return $rc
}

if [ ! "$xyzzy" ]; then
	export PATH="$HOME/code/bin:$PATH"

	if ! git var GIT_AUTHOR_IDENT >/dev/null; then
		echo "removed broken .gitconfig"
		mv -f ~/.gitconfig ~/gitconfig.bad ||
		rm -f ~/.gitconfig
	fi

	log "fetching code.git"
	cd ~/code
	silent git pull
	xyzzy=42 exec dist/pull
else
	case `fqdn` in
		*.cluenet.org|*.nathan7.eu|*.nullroute.eu.org)
			touch ~/.k5login
			;;
	esac

	# authorized_keys

	if [ -d ~/.gnupg ]; then
		log "updating authorized_keys"
		security/update-authorized-keys
	fi &

	# rwho

	if [ -d ~/lib/rwho ]; then
		log "updating rwho"
		(cd ~/lib/rwho
		silent git pull --ff-only
		if ./agent-linux/rwho-agent.sh status >/dev/null; then
			./agent-linux/rwho-agent.sh update
		fi)
	fi &

	# dotfiles

	if [ -d ~/lib/dotfiles ]; then
		log "fetching dotfiles.git"
		(cd ~/lib/dotfiles
		silent git pull --ff-only)
	else
		log "cloning dotfiles.git"
		mkdir -p ~/lib
		git clone "git://github.com/grawity/dotfiles.git" ~/lib/dotfiles
	fi

	log "running dotfiles/install"
	~/lib/dotfiles/install

	# dotfiles/.k5login

	if [ -f ~/.k5login ] && [ ! -k ~/.k5login ]; then
		log "updating .k5login"
		security/update-k5login
	fi
fi

wait
