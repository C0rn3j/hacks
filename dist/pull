#!/usr/bin/env bash
[[ $DEBUG ]] && set -x
set -e

if [[ -t 1 ]]; then
	log() { printf "\e[32m=\e[m %s\e[m\n" "$*"; }
else
	log() { true; }
fi

silent() {
	local output=$(mktemp /tmp/log.XXXXXX)
	( "$@" ) >& "$output"
	local rc=$?
	(( rc )) && cat "$output"
	rm -f "$output"
	return $rc
}

if [[ -z $xyzzy ]]; then
	# Update ~/code and run the new script
	export PATH="$HOME/code/bin:$PATH"
	export xyzzy=42

	if ! git var GIT_AUTHOR_IDENT >/dev/null; then
		echo "gitconfig rejected; will remove before continuing."
		mv -f ~/.gitconfig ~/gitconfig.bad ||
		rm -f ~/.gitconfig
	fi

	log "fetching code.git"
	cd ~/code
	silent git pull
	exec dist/pull
else
	if ! make -q; then
		log "updating tools"
		make -s
	fi

	case `fqdn` in
		*.cluenet.org|*.nathan7.eu|*.nullroute.eu.org)
			if ! [[ -f ~/.k5login ]]; then
				touch ~/.k5login
			fi
			;;
	esac

	if [[ -d ~/.gnupg ]]; then
		log "updating authorized_keys"
		~/code/security/update-authorized-keys
	fi &

	{
		if [[ -d ~/lib/dotfiles ]]; then
			log "fetching dotfiles.git"
			cd ~/lib/dotfiles
			silent git pull --ff-only
		else
			log "cloning dotfiles"
			mkdir -p ~/lib
			git clone "https://github.com/grawity/dotfiles.git" \
				~/lib/dotfiles
		fi
		log "running dotfiles/install"
		~/lib/dotfiles/install

		if [[ -f ~/.k5login ]]; then
			log "updating .k5login"
			~/code/security/update-k5login
		fi
	} &

	if [[ -d ~/lib/rwho ]]; then
		log "updating rwhod"
		cd ~/lib/rwho &&
		silent git pull --ff-only &&
		if ./agent-linux/rwho-agent.sh status >/dev/null; then
			./agent-linux/rwho-agent.sh update
		fi
	fi &
fi
wait
