#!/usr/bin/env perl
# frecency-sort (aka dmenu-print-history) -- weighted sort by command usage
#
# Expects timestamped history as input, with each line prefixed by Unix
# timestamp (*does not* support .bash_history format yet).
#
#   echo "$(date +%s) $command" >> "$histfile"
#
# (c) 2015 Mantas MikulÄ—nas <grawity@gmail.com>
# Released under the MIT Expat License (dist/LICENSE.expat)
#
# Frecency algorithm borrowed from rupa/z:
#   <https://github.com/rupa/z/wiki/frecency>
#   (c) 2009 rupa deadwyler, released under the WTFPL license

use warnings;
use feature qw(say);
use Nullroute::Lib;

sub rank {
	my ($time) = @_;
	my $age = time - $time;

	return 4   if $age < 3600;
	return 2   if $age < 86400;
	return 1/2 if $age < 604800;
	return 1/4;
}

$histfile = shift @ARGV // _die("missing histfile argument");

_debug("loading history from $histfile");

if (open(my $f, "<", $histfile)) {
	@history = map {/^(\d+) (.+)$/ ? [int $1, $2] : [0, $_]}
	           grep {chomp; 1} <$f>;
	close($f);
} else {
	if ($!{ENOENT}) {
		_debug("could not open histfile: $!");
		exit;
	} else {
		_die("could not open histfile: $!");
	}
}

exit if !@history;

for (@history) {
	my ($time, $item) = @$_;
	if ($time{$item} // 0 < $time) {
		$time{$item} = $time;
	}
}

@history = map {$_->[1]} @history;

$count{$_} += 1 for @history;
$count{$_} *= rank($time{$_}) for keys %time;

@sorted =
	sort {$count{$a} <=> $count{$b}}
	uniq @history;

if ($::debug) {
	_debug("popular item: '$_' ($count{$_})") for @sorted;
}

say for reverse @sorted;
