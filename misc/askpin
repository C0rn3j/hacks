#!/usr/bin/env bash
# Wrapper around GPG pinentry to be used as a simple 'askpass' tool.

. lib.bash || exit

usage() {
	echo "Usage: ${0##*/} [OPTION]... [description]"
	echo ""
	echo "    -d description set description"
	echo "    -t title       set entry window title"
	echo "    -p text        set entry prompt (default is 'PIN:')"
	echo ""
	echo "    -O oktext      set OK button label"
	echo "    -C canceltext  set Cancel button label"
	echo ""
	echo "    -g             (pinentry) append --no-global-grab"
	echo "    -W windowid    (pinentry) append --parent-wid \$windowid"
	echo "    -o option      (pinentry) append given option"
	echo "    -P path        use a different pinentry executable"
	exit 2
}

encode() {
	printf '%s' "$*" |
	perl -pe "s/([^A-Za-z0-9_.!~*'()-])/sprintf(\"%%%02X\", ord(\$1))/seg"
}

pinentry=(pinentry)
config=("SETPROMPT")

if (( DEBUG > 1 )); then
	set -x
fi

while getopts ':c:C:Dd:ghO:o:P:p:t:xW:' OPT; do
	debug "getopts: [$OPTIND] -$OPT '$OPTARG'" >&2
	case "$OPT" in
	c)	config+=("$OPTARG") ;;
	C)	config+=("SETCANCEL $(encode "$OPTARG")") ;;
	D)	DEBUG=1 ;;
	d)	config+=("SETDESC $(encode "$OPTARG")") ;;
	g)	pinentry+=(--no-global-grab) ;;
	h)	usage ;;
	O)	config+=("SETOK $(encode "$OPTARG")") ;;
	o)	pinentry+=("$OPTARG") ;;
	P)	pinentry[0]="$OPTARG" ;;
	p)	config+=("SETPROMPT $(encode "$OPTARG")") ;;
	t)	config+=("SETTITLE $(encode "$OPTARG")") ;;
	W)	pinentry+=(--parent-wid "$(encode "$OPTARG")") ;;
	\?)	echo "${0##*/}: unknown option '$OPTARG'" >&2; usage >&2 ;;
	*)	echo "${0##*/}: option -$OPT not implemented" >&2; exit 2 ;;
	esac
done

if [[ "${!OPTIND}" ]]; then
	config+=("SETDESC $(encode "${!OPTIND}")")
fi

if [[ $GPG_TTY ]]; then
	pinentry+=(--ttyname "$GPG_TTY")
elif [[ -t 0 ]]; then
	pinentry+=(--ttyname /dev/tty)
fi

if [[ $LC_ALL ]]; then
	LC_MESSAGES=$LC_ALL
	LC_CTYPE=$LC_ALL
fi

: ${LANG:='en_US.UTF-8'}
: ${LC_CTYPE:=$LANG}
: ${LC_MESSAGES:=$LANG}

pinentry+=(
	--lc-ctype "$LC_CTYPE"
	--lc-messages "$LC_MESSAGES"
)

#config+=(
#	"OPTION lc-ctype $LC_CTYPE"
#	"OPTION lc-messages $LC_CTYPE"
#)

# spawn the pinentry program
debug "command: ${pinentry[*]}"
coproc { "${pinentry[@]}" 2>/dev/null \
	|| die "could not launch pinentry (${pinentry[0]})"; }
trap "trap - INT HUP TERM QUIT; kill \$pinentry_pid 2>/dev/null" \
	EXIT INT HUP TERM QUIT
pinentry_pid=$!
in=${COPROC[0]}
out=${COPROC[1]}
i=0
ok=0

state=configure
while read -r status rest <&$in; do
	debug "State: $state"
	debug "$state <-- $status {$rest}"
	case $state in
	configure)
		case $status in
		'OK')
			ok=1
			if (( i == ${#config[@]} )); then
				debug "--> GETPIN"
				echo "GETPIN" >&$out
				state=waitinput
			else
				debug "--> ${config[$i]}"
				printf '%s\n' "${config[$i]}" >&$out
				(( ++i ))
			fi
			;;
		'ERR')
			err "$rest"
			exit 4
			;;
		esac
		;;
	waitinput)
		case "$status" in
		'OK')
			debug "null input submitted by user"
			exit 0
			;;
		'D')
			printf '%s\n' "$rest"
			exit 0
			;;
		'ERR')
			err "pinentry prompt cancelled by user"
			exit 1
			;;
		esac
		;;
	esac
done

(( ok ))
