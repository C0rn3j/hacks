#!/usr/bin/env bash

warn() { printf "\e[31mwarning:\e[m %s\n" "$*"; } >&2

problem() { (( ++sy_total )); printf "\n\e[33mproblem:\e[m %s\n" "$*"; }

is_locale_supported() {
	locale -a 2>/dev/null | grep -qsxF "$(get_locale "$1")"
}

get_locale() {
	local locale=$1
	if [[ $locale == *.* ]]; then
		locale=${locale%%.*}.$(get_charset "$locale")
	fi
	echo "$locale"
}

get_charset() {
	local locale=$1 charset=''
	if [[ $locale == *.* ]]; then
		charset=${locale#*.}
		charset=${charset//-/}
		charset=${charset,,}
	else
		charset='default'
	fi
	echo "$charset"
}

check_setting() {
	local name=$1 value=$2

	[[ -z $value ]] && return

	if ! is_locale_supported "$value"; then
		warn "$name: unsupported locale \"$value\""
		(( ++sy_missing ))
		local xlocale=$(get_locale "$value")
		sy_missing_locs["$xlocale"]=y
	fi

	local charset=$(get_charset "$value")
	if [[ $charset != "utf8" ]]; then
		warn "$name: non-UTF8 locale \"$value\""
		(( ++sy_nonutf8 ))
	fi

	if [[ "$charset" != "$main_charset" ]]; then
		if [[ "${name##* }" == "LANG" ]]; then
			continue
		fi
		warn "$name: charset does not match LANG ($charset | $main_charset)"
	fi
}

unset ${!sy_*}
declare -A sy_missing_locs

vars=("LC_CTYPE" "LC_NUMERIC" "LC_TIME" "LC_COLLATE" "LC_MONETARY" "LC_MESSAGES" "LC_PAPER"
	"LC_NAME" "LC_ADDRESS" "LC_TELEPHONE" "LC_MEASUREMENT" "LC_IDENTIFICATION" "LC_ALL")

unset ${!TERM_*}
while IFS='=' read -d '' name value; do
	if [[ $name == LANG || $name == LC_* ]]; then
		declare "TERM_$name"="$value"
	fi
done < "/proc/$PPID/environ"

if [[ -z $LANG ]]; then
	warn "(shell) LANG: not set"
	main_charset='default'
else
	main_charset=$(get_charset "$LANG")
fi

if [[ -z $TERM_LANG ]]; then
	warn "(term) LANG: not set"
	t_main_charset='default'
else
	t_main_charset=$(get_charset "$TERM_LANG")
fi

for name in LANG "${vars[@]}"; do
	value=${!name}
	locale=$(get_locale "$value")
	charset=$(get_charset "$value")
	t_name="TERM_$name"
	t_value=${!t_name}
	t_locale=$(get_locale "$t_value")
	t_charset=$(get_charset "$t_value")

	check_setting "(shell) $name" "$value"

	check_setting "(term) $name" "$t_value"

	if [[ "$name" == "LC_ALL" && -n "$value" ]]; then
		warn "$name: should not be set ($value)"
		(( ++sy_lcall ))
	fi

	if [[ -n "$value" && -z "$t_value" ]]; then
		warn "$name: set by shell but not terminal ($value | none)"
		(( ++sy_mismatch ))
	elif [[ -z "$value" && -n "$t_value" ]]; then
		warn "$name: set by terminal but not shell (none | $t_value)"
		(( ++sy_mismatch ))
	elif [[ "$charset" != "$t_charset" ]]; then
		warn "$name: charset mismatch between shell and terminal ($locale | $t_locale)"
		(( ++sy_mismatch ))
	elif [[ "$locale" != "$t_locale" ]]; then
		warn "$name: lang mismatch between shell and terminal ($locale | $t_locale)"
		(( ++sy_mismatch ))
	fi
done

if [[ ${LANG,,} == *'.utf8' ]]; then
	(( ++sy_utf8_dash ))
fi

if (( sy_mismatch )); then
	problem "Shell and terminal have different locale settings."
	echo " * Your ~/.bashrc or similar startup scripts may be overriding them."
fi

if (( sy_lcall )); then
	problem "You have \$LC_ALL set; it overrides all other settings."
	echo " * Do not set \$LC_ALL unless absolutely required."
	echo "   For normal usage, setting \$LANG should be enough."
fi

if (( sy_nonutf8 )); then
	problem "Your current locale is using a legacy charset."
	echo " * Change your locales to their UTF-8 variants."
fi

if (( sy_missing )); then
	problem "Your current locale is missing from the system."
	echo " * The missing locales are:"
	printf '   - \e[1m%s\e[m\n' "${!sy_missing_locs[@]}"
	echo " * Make sure /etc/locale.gen has the apropriate lines uncommented."
	echo "   After editing the file, run 'locale-gen' as root."
fi

if (( sy_utf8_dash )); then
	problem "\$LANG is missing a dash in the charset."
	echo " * Even though 'utf-8' and 'utf8' are equivalent, some poorly-written programs"
	echo "   (such as 'tree') consider them different and will not work with the latter."
	echo " * To fix this, change \$LANG from \"$LANG\" to \"${LANG%.*}.utf-8\""
fi

if (( sy_total == 0 )); then
	printf "Looks good. \xe2\x99\xa5"
fi

printf "\n"
