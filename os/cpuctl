#!/usr/bin/env perl
# cpuctl - hotplug CPUs on Linux

use feature qw(say switch);

sub err {
	say STDERR @_;
	our $err; ++$err;
}

sub rangesplit {
	my ($str) = @_;
	my @items;
	for (split /,/, $str) {
		when (/^(\d+)-(\d+)$/) {
			push @items, $1..$2;
		}
		when (/^\d+$/) {
			push @items, $_;
		}
		default {
			err "Not a number: $_";
		}
	}
	@items;
}

sub put {
	my ($file, $str) = @_;
	if (open my $fh, ">", $file) {
		say $fh $str;
		close $fh;
	} else {
		err "Cannot open $file: $!";
	}
}

sub get {
	my ($file) = @_;
	if (open my $fh, "<", $file) {
		chomp(my $str = <$fh>);
		close $fh;
		return $str;
	} else {
		err "Cannot open $file: $!";
	}
}

sub cpu {
	"/sys/devices/system/cpu/cpu".shift;
}

sub allcpus {
	grep {-e cpu($_)} 0..127;
}

sub can_offline {
	my $path = cpu(shift)."/online";
	-e $path ? $path : undef;
}

sub is_online {
	my $path = can_offline(shift);
	$path ? int get($path) : 1;
}

sub put_online {
	my $path = can_offline(shift);
	put($path, shift) if $path;
}

my $cmd = shift @ARGV;

for ($cmd) {
	when (undef) {
		for (allcpus) {
			my $status = is_online($_) ? "online" : "offline";
			$status .= " (fixed)" if !can_offline($_);
			say "cpu $_: $status";
		}
	}
	when ("online") {
		my @cpus = @ARGV ? map {rangesplit($_)} @ARGV : allcpus;
		@cpus = grep {can_offline($_)} @cpus;
		if (@cpus) {
			say "Onlining CPUs: @cpus";
			put("$_/online", "1") for map {cpu($_)} @cpus;
		} else {
			err "No hotpluggable CPUs given.";
		}
	}
	when ("offline") {
		my @cpus = @ARGV ? map {rangesplit($_)} @ARGV : allcpus;
		@cpus = grep {can_offline($_)} @cpus;
		if (@cpus) {
			say "Offlining CPUs: @cpus";
			put("$_/online", "0") for map {cpu($_)} @cpus;
		} else {
			err "No hotpluggable CPUs given.";
		}
	}
}

exit !!$err;
