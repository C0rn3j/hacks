#!/usr/bin/env perl
# gnome-inhibit - temporarily suspend "session idle" check in GNOME
#
# Â© 2012 Mantas M. <grawity@gmail.com>
# Released under WTFPL v2 <http://sam.zoy.org/wtfpl/>
use v5.10;
use warnings;
use strict;
use locale;
use Getopt::Long qw(:config no_ignore_case bundling require_order);
use List::Util qw(max);
use Net::DBus;
use POSIX;

# Flags tracked by GNOME session manager (gnome-session/gsm-inhibitor-flag.h)
my %FLAGS = (
	"logout"	=> 1<<0,
	"switch-user"	=> 1<<1,
	"suspend"	=> 1<<2,
	"idle"		=> 1<<3,
	"automount"	=> 1<<4,
);

my $bus;

sub SessionManager {
	$bus
	->get_service("org.gnome.SessionManager")
	->get_object(shift // "/org/gnome/SessionManager")
}

sub usage {
	say for
	"Usage: gnome-inhibit [options] [<command> [args...]]",
	"Usage: gnome-inhibit [options] {--list|--test}",
	"",
	# for compatibility with systemd-inhibit
	"  --who <application>           Application name (alias for --app-id)",
	"  --what <flags>                Inhibitor flags  (alias for --flags)",
	"  --why <reason>                Inhibit reason   (alias for --reason)",
	"",
	"  -a, --app-id <application>    Application name to identify ourselves as",
	"  -f, --flags <flags>           Inhibitor flags (default: \"idle\")",
	"  -r, --reason <reason>         Inhibit reason",
	"",
	"  -A, --always                  Run command even if gnome-session not running",
	"      --help                    This message",
	"  -l, --list                    List active inhibitors",
	"  -t, --test                    Test if any inhibitors are present",
	"  -v, --verbose                 Verbose mode",
	"",
	"Flags can be specified as a comma- or colon-separated list, or the word \'all\'.",
	"Supported flags are: ".join(" ", sort keys %FLAGS),
	"",
	"If --list is given, --flags will be used as a list filter (default: show all).",
	"",
	"If --test is given, the tool will exit with code 1 if any of the given",
	"operations from --flags are inhibited.",
	"",
	"If both --list and --test are given, all inhibited actions will be listed in",
	"terse form, optionally with --flags used as a list filter.",
	"",
	"If <command> is given, inhibit will last until the command exits; otherwise,",
	"this tool calls pause() and keeps running until manually killed/terminated.",
	;
	exit 0;
}

sub maxlength {
	my ($attr, @items) = @_;
	(max map {length $_->{$attr}} @items) // 0;
}

sub printrow {
	my (@items) = @_;
	my $columns = @items;
	if ($columns % 2) {
		warn "Odd number of items";
		pop @items;
		--$columns;
	}
	my $fmt = "%-*s  " x ($columns/2);
	$fmt =~ s/\s+$/\n/;
	printf $fmt, @items;
}

sub flags_to_array {
	my ($bits) = @_;
	sort grep {$bits & $FLAGS{$_}} keys %FLAGS;
}

sub flags_to_string {
	my ($bits) = @_;
	$bits ? join(",", flags_to_array($bits)) : "none";
}

sub string_to_flags {
	my $flagstr = shift;
	my $flags = 0;
	for (split /[:,|]/, $flagstr) {
		if ($_ eq 'all') {
			$flags |= 0x7fffffff;
		} elsif ($_ eq 'sleep') {
			$flags |= $FLAGS{suspend};
		} elsif (defined $FLAGS{$_}) {
			$flags |= $FLAGS{$_};
		} elsif (/^([0-9]+)$/) {
			$flags |= int $_;
		} elsif (/^(0x[0-9a-fA-F]+)$/) {
			$flags |= hex $_;
		} else {
			warn "Unknown inhibit flag: '$_'\n";
		}
	}
	if ($flags >> 31) {
		die "Inhibit bitmask too large (must be an uint32)\n";
	}
	return $flags;
}

sub get_inhibitors {
	my ($flags) = @_;

	sort {$a->{app_id} cmp $b->{app_id}}
	map {
		my $ih = $_;
		my $flags = $ih->GetFlags;
		{
			path      => $ih->get_object_path,
			app_id    => $ih->GetAppId,
			client_id => eval {$ih->GetClientId} // "(none)",
			reason    => eval {$ih->GetReason} // "(none)",
			flags     => $flags,
			szflags   => flags_to_string($flags),
			top_xid   => $ih->GetToplevelXid,
		};
	}
	grep {!$flags or $_->GetFlags & $flags}
	map {SessionManager($_)}
	@{SessionManager->GetInhibitors};
}

sub display_inhibitors {
	my ($verbose, @inhibitors) = @_;

	my %header = (
		app_id    => "APPLICATION",
		client_id => "CLIENT",
		reason    => "REASON",
		flags     => "FLAGS",
		szflags   => "INHIBITS",
		top_xid   => "WINDOW",
	);

	my @fields = $verbose
		? qw(app_id reason flags szflags client_id top_xid)
		: qw(app_id reason szflags);

	my %len = map {$_ => max(length($header{$_}),
				maxlength($_, @inhibitors))} @fields;

	printrow map {$len{$_}, $header{$_}} @fields;

	for my $v (@inhibitors) {
		printrow map {$len{$_}, $v->{$_}} @fields;
	}
}

# Option parser

my $do_list	= 0;
my $do_test	= 0;
my $always	= 0;
my $verbose	= !!$ENV{DEBUG};
my $app_id	= "gnome-inhibit";
my $log_id	= "gnome-inhibit";
my $reason	= "User-initiated inhibit";
my $flagstr	= undef;
my $top_xid	= 0;

GetOptions(
	'A|always'	=> \$always,
	'a|app-id=s'	=> \$app_id,
	'f|flags=s'	=> \$flagstr,
	'l|list'	=> \$do_list,
	'r|reason=s'	=> \$reason,
	't|test'	=> \$do_test,
	'v|verbose'	=> \$verbose,
	'what=s'	=> \$flagstr,
	'who=s'		=> \$app_id,
	'why=s'		=> \$reason,
	'x|xid=o'	=> \$top_xid,
	'help'		=> \&usage,
) or exit(2);

if (@ARGV && ($do_list || $do_test)) {
	if (defined $flagstr) {
		warn "$log_id: Extra arguments ignored.\n";
	} else {
		warn "$log_id: Use --flags to filter by inhibit action.\n";
		$flagstr //= join(",", @ARGV);
	}
}

# Main code

if ($log_id ne $app_id) {
	$log_id .= "($app_id)";
}

if ($always) {
	eval {$bus = Net::DBus->session};
	if ($bus) {
		$bus = undef unless eval {SessionManager};
	}
} else {
	$bus = Net::DBus->session;
	# will die if no bus
}

if ($do_list && $do_test) {
	if (!$bus) {
		warn "gnome-session is not running.\n";
		exit 0;
	}

	my $filter = string_to_flags($flagstr //= "all");
	my $flags = SessionManager->Get("org.gnome.Session",
					"InhibitedActions") & $filter;
	say for $flags ? flags_to_array($flags) : "none";

	exit 0;
} elsif ($do_list) {
	if (!$bus) {
		warn "gnome-session is not running.\n";
		exit 0;
	}

	my $flags = string_to_flags($flagstr //= "0");
	display_inhibitors($verbose, get_inhibitors($flags));

	exit 0;
} elsif ($do_test) {
	if (!$bus) {
		say "no" if $verbose;
		exit 0;
	}

	my $flags = string_to_flags($flagstr //= "idle");
	if (!$flags) {
		warn "Error: No inhibit flags given.\n";
		exit 2;
	}

	if (SessionManager->IsInhibited($flags)) {
		say "yes" if $verbose;
		exit 1;
	} else {
		say "no" if $verbose;
		exit 0;
	}
} else {
	my $cookie;

	my $flags = string_to_flags($flagstr //= "idle");
	if (!$flags) {
		warn "Error: No inhibit flags given.\n";
		exit 2;
	}

	if ($bus) {
		$cookie = SessionManager->Inhibit($app_id, $top_xid, $reason, $flags);
		if ($cookie) {
			say "$log_id: inhibited: ".flags_to_string($flags) if $verbose;
		} else {
			warn "$log_id: inhibit failed\n";
			exit 1;
		}
	} else {
		say "$log_id: gnome-session not running; inhibit not added" if $verbose;
	}

	my @cmd = @ARGV;
	my $return = 0;

	if (@cmd) {
		say "$log_id: executing: @cmd" if $verbose;
		$return = system {$cmd[0]} @cmd;
		$return = POSIX::WEXITSTATUS($return);
	} else {
		$SIG{INT} = sub {
			say "$log_id: SIGINT caught, exiting" if $verbose;
			SessionManager->Uninhibit($cookie) if $cookie;
			exit 0;
		};
		say "$log_id: pausing until signal; use Ctrl-C to interrupt";
		POSIX::pause();
	}

	SessionManager->Uninhibit($cookie) if $cookie;
	exit $return;
}
