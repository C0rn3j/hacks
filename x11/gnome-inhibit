#!/usr/bin/env perl
# gnome-inhibit - temporarily suspend "session idle" check in GNOME
#
# Â© 2012 Mantas M. <grawity@gmail.com>
# Released under WTFPL v2 <http://sam.zoy.org/wtfpl/>
use v5.10;
use warnings;
use strict;

use Getopt::Long qw(:config no_ignore_case bundling);
use Net::DBus;
use POSIX;

my %FLAGS = (
	"logout"	=> 1<<0,
	"switch-user"	=> 1<<1,
	"suspend"	=> 1<<2,
	"idle"		=> 1<<3,
	"automount"	=> 1<<4,
);

sub usage {
	say for
	"Usage: gnome-inhibit [options]",
	"       gnome-inhibit [options] <command> [args...]",
	"",
	"    -f, --flags <flags>         Inhibit flags (default: 'idle')",
	"    -r, --reason <reason>       Inhibit reason",
	"",
	"Prevents system from going into suspend mode on idle.",
	"",
	"Flags can be specified as a comma- or colon-separated list of names.",
	"Supported flags are: ".join(" ", sort keys %FLAGS),
	"",
	"If <command> is given, inhibit will last until the command exits; otherwise,",
	"this tool will keep running until manually killed/terminated.",
	;
	exit(0);
}

my $app_id	= "gnome-inhibit";
my $top_xid	= 0;
my $reason	= "User-initiated inhibit.";
my $flagstr	= "idle";
my $flags	= 0;

my $cookie	= 0;
my @cmd		= ();
my $return	= 0;

GetOptions(
	'f|flags=s'	=> \$flagstr,
	'r|reason=s'	=> \$reason,
	'x|xid=i'	=> \$top_xid,
	'help'		=> \&usage,
) or exit(2);

$flags = 0;

for (split(/[:,]/, $flagstr)) {
	if ($_ eq 'all') {
		$flags |= 0x7fffffff;
	} elsif (defined $FLAGS{$_}) {
		$flags |= $FLAGS{$_};
	} else {
		die "Unknown inhibit flag: '$_'\n";
	}
}

@cmd = @ARGV;

my $bus	= Net::DBus->session;
my $sm	= $bus->get_service("org.gnome.SessionManager")
		->get_object("/org/gnome/SessionManager");

sub inhibit {
	$cookie = $sm->Inhibit($app_id, $top_xid, $reason, $flags);
	print "$app_id: inhibit ok ($cookie)\n";
}

sub uninhibit {
	$sm->Uninhibit($cookie);
	print "$app_id: uninhibit ok\n";
	$cookie = 0;
}

inhibit();

if (@cmd) {
	print "$app_id: executing command: @cmd\n";
	$return = system {$cmd[0]} @cmd;
	$return = POSIX::WEXITSTATUS($return);
} else {
	$SIG{INT} = sub {
		print "$app_id: SIGINT caught, exiting\n";
		uninhibit();
		exit(0);
	};
	print "$app_id: pausing until signal; use Ctrl-C to interrupt\n";
	POSIX::pause();
}

uninhibit();
exit($return);
