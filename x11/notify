#!/usr/bin/env perl
# notify - libnotify command-line interface not entirely unlike 'notify-send'
no if $] >= 5.017011, warnings => qw(experimental::smartmatch);
use feature qw(say switch);
use File::Path qw(make_path);
use Getopt::Long qw(:config no_ignore_case bundling);
use Net::DBus;

my $bus = Net::DBus->session;

sub Notifications {
	$bus
	->get_service("org.freedesktop.Notifications")
	->get_object("/org/freedesktop/Notifications")
}

my $statedir	= ($ENV{XDG_CACHE_HOME} // $ENV{HOME}."/.cache") . "/notify/";

my $icon	= "";
my $id		= 0;
my $summary	= "";
my $body	= "";
my @actions	= ();
my @hints	= ();
my %hints	= ();
my $application	= "notify";
my $timeout	= -1;
my $statefile	= undef;
my $oldbody	= "";
my $appendbody	= 0;

GetOptions(
	'a|app-name=s'	=> \$application,
	'A|append'	=> \$appendbody,
	'c|category=s'	=> sub { push @hints, "category=".$_[1] },
	'h|hint=s'	=> \@hints,
	'i|icon=s'	=> \$icon,
	'r|replace=i'	=> \$id,
	's|state=s'	=> \$statefile,
	't|timeout=s'	=> \$timeout,
	'u|urgency=s'	=> sub { push @hints, "urgency=".$_[1] },
	'resident'	=> sub { push @hints, "resident" },
	'transient'	=> sub { push @hints, "transient" },
) or die "$@";

$summary = shift(@ARGV) or die "notify: summary not given\n";
$body = join(" ", @ARGV);

if (defined $statefile) {
	if ($statefile =~ s/^\+/$statedir/) {
		# If +name given as state file, the user wants as little
		# hassle as possible. Create the directories.
		-d $statedir || make_path($statedir);
	}
	if (!$id) {
		if (open(my $fh, "<", $statefile)) {
			$id = int <$fh>;
			chomp($oldbody = join("", <$fh>));
			close($fh);
		}
	}
}

if ($appendbody) {
	unless (defined $statefile) {
		warn "notify: --append is useless without state file\n";
	}
	$body = join("\n", grep {length} ($oldbody, $body));
}

for (@hints) {
	when (/^urgency=(.*)$/) {
		for ($1) {
			$val = 0 when "low";
			$val = 1 when "normal";
			$val = 2 when ["critical", "high"];
			default {
				die "notify: invalid urgency level\n";
			}
		}
		$hints{urgency} = Net::DBus::dbus_byte($val);
	}
	when (/^(category|desktop-entry|image-path|synchronous)=(.*)$/) {
		$hints{$1} = Net::DBus::dbus_string($2);
	}
	when (/^(resident|transient)$/) {
		$hints{$1} = Net::DBus::dbus_boolean(1);
	}
	when (/^(icon-only)$/) {
		$hints{$1} = Net::DBus::dbus_string("");
	}
	# Generic
	when (/^bool:([^=]+)=(.*)$/) {
		$hints{$1} = Net::DBus::dbus_boolean($2);
	}
	when (/^byte:([^=]+)=(.*)$/) {
		$hints{$1} = Net::DBus::dbus_byte($2);
	}
	when (/^str:([^=]+)=(.*)$/) {
		$hints{$1} = Net::DBus::dbus_string($2);
	}
}

for ($timeout) {
	when (-1) {
		;
	}
	when (/^(\d+)s?$/) {
		$timeout = $1 * 1000;
	}
	when (/^(\d+)ms$/) {
		$timeout = $1;
	}
	default {
		die "notify: invalid timeout\n";
	}
}

$id = Notifications->Notify(
		$application,
		$id,
		$icon,
		$summary,
		$body,
		\@actions,
		\%hints,
		$timeout);

if (defined $statefile) {
	open(my $fh, ">", $statefile) or die "notify: cannot update state: $!\n";
	say $fh $id;
	say $fh $body;
	close($fh);
} else {
	say $id;
}
