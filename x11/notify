#!/usr/bin/env perl
# notify - libnotify command-line interface not entirely unlike 'notify-send'
use warnings;
no if $] >= 5.017011, warnings => qw(experimental::smartmatch);
use strict;
use feature qw(say switch);
use File::Path qw(make_path);
use Getopt::Long qw(:config no_ignore_case bundling);
use Net::DBus;
use Nullroute::Dir;
use Nullroute::Lib qw(_debug _warn _err _die);

my $bus = Net::DBus->session;

sub Notifications {
	$bus
	->get_service("org.freedesktop.Notifications")
	->get_object("/org/freedesktop/Notifications")
}

sub usage {
	say for
	"Usage: $::arg0 [options] <title> [body]",
	"",                       #
	"Basic metadata:",
	"",
	"  -a, --app-name=NAME    Specify application name",
	"  -i, --icon=NAME        Specify notification icon",
	"  -t, --timeout=TIME     Specify timeout ('XXs' or 'XXms')",
	"",
	"Extended hints:",
	"",
	"  -c, --category=TYPE    Specify notification category",
	"  -u, --urgency=LEVEL    Add an urgency hint (low, normal, high)",
	"      --resident         Add the 'resident' hint",
	"      --transient        Add the 'transient' hint",
	"  -h, --hint=HINT[=VAL]  Add a custom hint",
	"",
	"Other behavior:",
	"",
	"  -A, --append           Append body text",
	"  -r, --replace=ID       Replace old notification with given ID",
	"  -s, --state=NAME       Keep persistent state under given name",
}

my $statedir	= xdg_cache("notify");

my $icon	= "";
my $id		= 0;
my $summary	= "";
my $body	= "";
my @actions	= ();
my @hints	= ();
my %hints	= ();
my $application	= "notify";
my $timeout	= -1;
my $statefile	= undef;
my $oldbody	= "";
my $appendbody	= 0;

GetOptions(
	'help'		=> sub { usage(); exit; },
	'a|app-name=s'	=> \$application,
	'A|append'	=> \$appendbody,
	'c|category=s'	=> sub { push @hints, "category=".$_[1] },
	'h|hint=s'	=> \@hints,
	'i|icon=s'	=> \$icon,
	'r|replace=i'	=> \$id,
	's|state=s'	=> \$statefile,
	't|timeout=s'	=> \$timeout,
	'u|urgency=s'	=> sub { push @hints, "urgency=".$_[1] },
	'resident'	=> sub { push @hints, "resident" },
	'transient'	=> sub { push @hints, "transient" },
) or exit 2;

if (!@ARGV) {
	_die("missing notification summary", 2);
}

$summary = shift @ARGV;
$body = join(" ", @ARGV);

if (defined $statefile) {
	if ($statefile =~ s/^\+/$statedir/) {
		# If +name given as state file, the user wants as little
		# hassle as possible. Create the directories.
		make_path($statedir) if !-d $statedir;
	}
	if (!$id) {
		if (open(my $fh, "<", $statefile)) {
			$id = int <$fh>;
			chomp($oldbody = join("", <$fh>));
			close($fh);
		}
	}
}

if ($appendbody) {
	if (!defined $statefile) {
		_warn("--append is useless without state file");
	}
	$body = join("\n", grep {length} ($oldbody, $body));
}

for (@hints) {
	when (/^urgency=(.*)$/) {
		my $val;
		for ($1) {
			$val = 0 when ["0", "low"];
			$val = 1 when ["1", "normal"];
			$val = 2 when ["2", "high", "critical"];
			default {
				_die("invalid urgency level '$_'", 2);
			}
		}
		$hints{"urgency"} = Net::DBus::dbus_byte($val);
	}
	when (/^(category|desktop-entry|image-path|synchronous)=(.*)$/) {
		$hints{$1} = Net::DBus::dbus_string($2);
	}
	when (/^(resident|transient)$/) {
		$hints{$1} = Net::DBus::dbus_boolean(1);
	}
	when (/^(icon-only)$/) {
		$hints{$1} = Net::DBus::dbus_string("");
	}
	when (/^bool:([^=]+)=(.*)$/) {
		$hints{$1} = Net::DBus::dbus_boolean($2);
	}
	when (/^byte:([^=]+)=(.*)$/) {
		$hints{$1} = Net::DBus::dbus_byte($2);
	}
	when (/^str:([^=]+)=(.*)$/) {
		$hints{$1} = Net::DBus::dbus_string($2);
	}
	default {
		_die("invalid hint parameter '$_'", 2);
	}
}

for ($timeout) {
	when (-1) {
		;
	}
	when (/^(\d+)s?$/) {
		$timeout = $1 * 1_000;
	}
	when (/^(\d+)ms$/) {
		$timeout = $1;
	}
	default {
		_die("invalid timeout value '$_'", 2);
	}
}

$id = Notifications->Notify($application,
                            $id,
                            $icon,
                            $summary,
                            $body,
                            \@actions,
                            \%hints,
                            $timeout);

if (defined $statefile) {
	if (open(my $fh, ">", $statefile)) {
		say $fh $id;
		say $fh $body;
		close($fh);
	} else {
		_die("cannot update state: $!");
	}
} else {
	say $id;
}
