#!/usr/bin/env python
# systemd-lock-handler -- proxy between systemd-logind's "Lock" signal and your
#   favourite screen lock command

from __future__ import print_function
import os, sys, dbus, dbus.mainloop.glib
from gi.repository import GLib

def trace(*args):
	global arg0
	print("%s:" % arg0, *args)

def setup_signal(signal_handler):
	bus = dbus.SystemBus()

	manager = bus.get_object("org.freedesktop.login1",
				 "/org/freedesktop/login1")

	GetSession = manager.get_dbus_method("GetSession",
					     "org.freedesktop.login1.Manager")

	session_path = GetSession(session_id)

	session = bus.get_object("org.freedesktop.login1", session_path)

	session.connect_to_signal("Lock", signal_handler,
				  dbus_interface="org.freedesktop.login1.Session")

def handler_dbus_fdo():
	trace("locking session using DBus")

	bus = dbus.SessionBus()

	screensaver = bus.get_object("org.freedesktop.ScreenSaver",
				     "/ScreenSaver")

	Lock = screensaver.get_dbus_method("Lock",
					   "org.freedesktop.ScreenSaver")

	Lock()

def handler_external():
	global lock_command
	trace("locking session using %s" % lock_command[0])

	os.spawnvp(os.P_NOWAIT, lock_command[0], lock_command)

# handle command line

arg0 = sys.argv[0].split("/")[-1]

lock_command = sys.argv[1:] or ["--dbus"]

# obtain session ID

try:
	session_id = os.environ["XDG_SESSION_ID"]
except KeyError:
	print("error: $XDG_SESSION_ID not set; are you using pam_systemd?",
		file=sys.stderr)
	sys.exit(1)

# connect to DBus

dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

if lock_command == ["--dbus"]:
	setup_signal(handler_dbus_fdo)
else:
	setup_signal(handler_external)

print("%s: waiting for lock signals on session %s" % (arg0, session_id))

try:
	loop = GLib.MainLoop()
	loop.run()
except KeyboardInterrupt:
	sys.exit(0)
