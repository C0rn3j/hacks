#!/usr/bin/env perl
# Capture a window or entire screen to a PNG file, output filename.
#
# Uses GNOME Shell's screenshot functionality, which means decorations
# and window shadows get captured correctly (as transparent PNG).

use feature qw(say state switch);
no if $] >= 5.017011, warnings => qw(experimental::smartmatch);
use File::Basename qw(dirname);
use File::Path qw(make_path);
use File::Spec::Functions qw(rel2abs);
use Getopt::Long qw(:config bundling no_ignore_case);
use Net::DBus;
use Nullroute::Lib qw(_debug _notice _die);
use Nullroute::Dir qw(xdg_userdir);
use POSIX qw(strftime :sys_wait_h);
use Time::HiRes qw(usleep);

sub has_Shell {
	Net::DBus->session
	->get_service_owner("org.gnome.Shell")
}

sub Shell {
	Net::DBus->session
	->get_service("org.gnome.Shell")
	->get_object(shift // "/org/gnome/Shell")
}

sub Notifications {
	Net::DBus->session
	->get_service("org.freedesktop.Notifications")
	->get_object("/org/freedesktop/Notifications")
}

sub notify {
	state $id = 0;
	my ($summary, %opts) = @_;

	$id = Notifications->Notify(
		$opts{app} // "Screenshot",
		$id,
		$opts{icon} // "document-send",
		$summary,
		$opts{body},
		$opts{actions} // [],
		$opts{hints} // {},
		$opts{timeout} // 1*1000);
}

my $sleep = 0;
my $frame = 1;
my $flash = 1;
my $cursor = 0;
my $mode = 'fullscreen';
my $template = "Screenshots/%Y-%m-%d.%H%M%S.png";
my $file_rel = undef;
my $file = undef;
my $upload = 1;
my $temporary = 0;

GetOptions(
	'a|area'	=> sub { $mode = 'area' },
	'f|fullscreen'	=> sub { $mode = 'fullscreen' },
	'w|window'	=> sub { $mode = 'window' },
	'N|no-upload'	=> sub { $upload = 0 },
	'frame!'	=> \$frame,
	'cursor!'	=> \$cursor,
	'flash!'	=> \$flash,
	's|sleep=f'	=> \$sleep,
	't|temporary!'	=> \$temporary,
) or exit 2;

if ($sleep) {
	say STDERR "waiting $sleep seconds...";
	usleep($sleep * 1_000_000);
}

if ($temporary) {
	$template =~ s/[^.]+?$/temp.$&/;
}

$file_rel = strftime($template, localtime);
$file = rel2abs($file_rel, xdg_userdir("Pictures"));

_debug("rel path: $file_rel");
_debug("abs path: $file");

for (dirname $file) {
	make_path($_) unless -d $_;
}

if (has_Shell) {
	_debug("using GNOME Shell interface");

	my $ShellScreenshot = Shell("/org/gnome/Shell/Screenshot");

	for ($mode) {
		when ('area') {
			Shell->ShowOSD({icon => "camera-photo-symbolic",
					label => "Select area"});
			my ($x, $y, $w, $h) = eval {$ShellScreenshot->SelectArea()}
			or _die("Shell->SelectArea failed");
			$ShellScreenshot->ScreenshotArea($x, $y, $w, $h, $flash, $file_rel)
			or _die("Shell->ScreenshotArea failed");
		}
		when ('fullscreen') {
			$ShellScreenshot->Screenshot($cursor, $flash, $file_rel)
			or _die("Shell->Screenshot failed");
		}
		when ('window') {
			$ShellScreenshot->ScreenshotWindow($frame, $cursor, $flash, $file_rel)
			or _die("Shell->ScreenshotWindow failed");
		}
	}
} elsif (-x "/usr/bin/maim" && -x "/usr/bin/slop") {
	_debug("using fallback method (maim+slop)");

	for ($mode) {
		when ('area') {
			system("maim", "-s", $file);
		}
		when ('fullscreen') {
			system("maim", $file);
		}
		when ('window') {
			if (-x "/usr/bin/xdotool") {
				system("maim", "-i", int `xdotool getactivewindow`, $file);
			} else {
				system("maim", "-s", $file);
			}
		}
	}
} else {
	_debug("using fallback method (scrot)");

	for ($mode) {
		when ('area') {
			system("scrot", "-s", $file);
		}
		when ('fullscreen') {
			system("scrot", $file);
		}
		when ('window') {
			system("scrot", "-s", $file);
		}
	}
}

if (! -f $file) {
	notify("Screenshot failed.",
		icon => "error",
		hints => {
			category => "transfer",
		});
	exit 1;
}

say $file;

my $uri = "file://$file";

if ($upload) {
	my $upload_pid;
	my $upload_output;

	local $SIG{CHLD} = sub {
		my $pid = waitpid(-1, WNOHANG);
		if ($pid == $upload_pid) {
			$upload_pid = 0;
		}
	};

	$upload_pid = open(my $upload_proc, "-|") || do {
		open(STDERR, ">&", \*STDOUT);
		exec("pomf", $file);
	};

	while ($upload_pid) {
		notify("Screenshot captured",
			body => "Uploading...",
			hints => {
				category => "transfer",
			});
		sleep 1;
	}

	$upload_output = do { local $/; <$upload_proc> };

	print $upload_output;
	chomp $upload_output;

	if ($? == 0) {
		notify("Screenshot uploaded",
			body => $upload_output,
			icon => $uri,
			hints => {
				category => "transfer.complete",
			});
		if ($temporary) {
			_debug("screenshot is temporary, deleting");
			unlink($file);
		}
	} else {
		notify("Screenshot upload failed",
			body => $upload_output,
			icon => $uri,
			hints => {
				category => "transfer.error",
			});
	}
} else {
	notify("Screenshot captured",
		icon => $uri);
	if ($temporary) {
		_notice("uploading disabled; keeping temporary screenshot");
	}
}
