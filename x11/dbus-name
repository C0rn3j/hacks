#!/usr/bin/env perl
# dbus-name - manage DBus names
use v5.14;
use warnings;
use Getopt::Long;
use Net::DBus;
use Net::DBus::Reactor;

my $bus;
my $busaddr;
my $err = 0;
my $activate = 0;
my $quiet = 0;
my $list = 0;
my $wait = 0;

sub usage {
	say for
	"Usage: dbus-name {-y|-e|-a ADDRESS} [-q] [-c] NAME...",
	"Usage: dbus-name {-y|-e|-a ADDRESS} [-q] {--wait|--wait-any} NAME...",
	"",
	"  -y, --system           Use system bus",
	"  -e, --session          Use session bus",
	"  -a, --address=ADDR     Connect to given D-Bus address",
	"  -q, --quiet            Remain silent, just set exit code",
	"  -c, --activate         Try to launch services using DBus activation",
	"  -l, --list             List all owned names (or activatable names with -c)",
	"  -w, --wait             Wait for listed names to appear on bus",
	"  --wait-any             Wait for /any/ of listed names to appear",
	"",
	"Without explicit bus specification, the heuristics implemented by Net::DBus",
	"will be used (session if DBUS_SESSION_BUS_ADDRESS is set, system otherwise).",
	"",
	"--wait does not care if names go away after appearing.",
	"",
}

GetOptions(
	"h|help"	=> sub { usage(); exit; },
	"y|system"	=> sub { $busaddr = "system"; },
	"e|session"	=> sub { $busaddr = "session"; },
	"a|address=s"	=> \$busaddr,
	"q|quiet"	=> \$quiet,
	"c|activate"	=> \$activate,
	"l|list"	=> \$list,
	"w|wait"	=> \$wait,
	"wait-any"	=> sub { $wait = "any"; },
) or do { usage(); exit 2; };

for ($busaddr) {
	when (undef) {
		$bus = Net::DBus->find;
	}
	when ("system") {
		$bus = Net::DBus->system;
	}
	when ("session") {
		$bus = Net::DBus->session;
	}
	default {
		$bus = Net::DBus->new($busaddr);
	}
}

if ($list) {
	warn "Note: --quiet does not make sense with --list.\n" if $quiet;
	my $obj = $bus->get_bus_object;
	my $names = $activate
			? $obj->ListActivatableNames
			: $obj->ListNames;
	say for sort @$names;
} elsif (@ARGV and $wait) {
	my $obj = $bus->get_bus_object;
	my @wanted = @ARGV;
	$obj->connect_to_signal("NameOwnerChanged", sub {
		my ($bus_name, $old_owner, $new_owner) = @_;
		if ($bus_name ~~ @wanted && $new_owner) {
			say "$bus_name taken by $new_owner" unless $quiet;
			@wanted = grep {$_ ne $bus_name} @wanted;
			exit 0 if $wait eq 'any' || !@wanted;
		}
	});
	my @current = $obj->ListNames;
	@wanted = grep {!($_ ~~ @current)} @wanted;
	exit 0 if !@wanted;
	Net::DBus::Reactor->main->run;
} elsif (@ARGV) {
	for my $name (@ARGV) {
		if ($activate) {
			eval {$bus->get_service($name)} or warn "$@";
		}
		my $owner = $bus->get_service_owner($name);
		$quiet or say $name, " ", $owner // "(none)";
		$owner or ++$err;
	}
	exit !!$err;
} else {
	usage();
	exit 2;
}
