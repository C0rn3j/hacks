#!/usr/bin/env perl
# dbus-name - manage DBus names
use v5.14;
use warnings;
use Getopt::Long qw(:config bundling);
use Net::DBus;
use Net::DBus::Reactor;

my $bus;
my $busaddr;
my $err = 0;
my $activate = 0;
my $quiet = 0;
my $list = 0;
my $wait = 0;
my $watch = 0;
my $color = 0;

sub usage {
	say for
	"Usage: dbus-name {-y|-e|-a ADDRESS} [-q] [-A] NAME...",
	"Usage: dbus-name {-y|-e|-a ADDRESS} [-q] [-A] --list",
	"Usage: dbus-name {-y|-e|-a ADDRESS} [-q] {--wait|--wait-any} NAME...",
	"Usage: dbus-name {-y|-e|-a ADDRESS} [-q] --watch",
	"",
	"  -y, --system           Use system bus",
	"  -e, --session          Use session bus",
	"  -a, --address=ADDR     Connect to given D-Bus address",
	"",
	"  -A, --activate         Try to launch services using DBus activation",
	"  -l, --list             List all owned names (or activatable names with -A)",
	"  --wait NAME...         Wait for listed names to appear on bus",
	"  --wait-any NAME...     Wait for /any/ of listed names to appear",
	"  -w, --watch            Watch bus for name owner changes",
	"",
	"  -q, --quiet            Remain silent, just set exit code if name exists",
	"                         In wait/watch mode: don't show PIDs and unique names",
	"",
	"Without explicit bus specification, the heuristics implemented by Net::DBus",
	"will be used (session if DBUS_SESSION_BUS_ADDRESS is set, system otherwise).",
	"",
	"The \"--wait NAME\" mode does not care if some names go away after appearing.",
}

GetOptions(
	"h|help"	=> sub { usage(); exit; },
	"y|system"	=> sub { $busaddr = "system"; },
	"e|session"	=> sub { $busaddr = "session"; },
	"a|address=s"	=> \$busaddr,
	"q|quiet"	=> \$quiet,
	"A|activate"	=> \$activate,
	"l|list"	=> \$list,
	"w|wait"	=> \$wait,
	"wait-any"	=> sub { $wait = "any"; },
	"watch"		=> \$watch,
) or exit 2;

$color = -t 1 && length($ENV{TERM}) > 0;

my %color = (
	"+"   => $color ? "\e[1;32m" : "",
	"~"   => $color ? "\e[1;33m" : "",
	"-"   => $color ? "\e[1;31m" : "",
	reset => $color ? "\e[m"     : "",
);

for ($busaddr) {
	when (undef) {
		$bus = Net::DBus->find;
	}
	when ("system") {
		$bus = Net::DBus->system;
	}
	when ("session") {
		$bus = Net::DBus->session;
	}
	default {
		$bus = Net::DBus->new(address => $busaddr);
	}
}

$|++; # autoflush stdout, to make piping into files/apps work

if ($list) {
	warn "Note: --quiet does not make sense with --list.\n" if $quiet;
	warn "Note: Extra arguments ignored with --list.\n" if @ARGV;
	my $obj = $bus->get_bus_object;
	my $names = $activate
			? $obj->ListActivatableNames
			: $obj->ListNames;
	if (eval {require Sort::Naturally}) {
		say for Sort::Naturally::nsort(@$names);
	} else {
		say for sort @$names;
	}
} elsif (@ARGV and $wait) {
	my $obj = $bus->get_bus_object;
	my @wanted = @ARGV;
	$obj->connect_to_signal("NameOwnerChanged", sub {
		my ($bus_name, $old_owner, $new_owner) = @_;
		if ($bus_name ~~ @wanted && $new_owner) {
			say "$bus_name taken by $new_owner" unless $quiet;
			@wanted = grep {$_ ne $bus_name} @wanted;
			exit 0 if $wait eq 'any' || !@wanted;
		}
	});
	my @current = $obj->ListNames;
	@wanted = grep {!($_ ~~ @current)} @wanted;
	exit 0 if !@wanted;
	Net::DBus::Reactor->main->run;
} elsif ($wait || $watch) {
	my $obj = $bus->get_bus_object;
	$obj->connect_to_signal("NameOwnerChanged", sub {
		my ($bus_name, $old_owner, $new_owner) = @_;
		return if $bus_name =~ /^:/;
		my $state = length($old_owner)
				? length($new_owner) ? "~" : "-"
				: length($new_owner) ? "+" : "?";
		my $new_pid = length($new_owner)
				? eval {$obj->GetConnectionUnixProcessID($new_owner)}
				: undef;
		if ($quiet) {
			say $color{$state}, $state, $color{reset},
				" ", $bus_name;
		} else {
			say $color{$state}, $state, $color{reset},
				" ", $bus_name,
				" ", length($old_owner) ? $old_owner : "(none)",
				" ", length($new_owner) ? $new_owner : "(none)",
				length($new_owner)
					? (" [", $new_pid // "none", "]") : ();
		}
	});
	Net::DBus::Reactor->main->run;
} elsif (@ARGV) {
	my $obj = $bus->get_bus_object;
	for my $name (@ARGV) {
		if ($activate) {
			eval {$bus->get_service($name)} or warn "$@";
		}
		my $owner = $bus->get_service_owner($name);
		if (!$quiet) {
			my $pid = $owner
				? eval {$obj->GetConnectionUnixProcessID($owner)}
				: undef;
			say $name,
				" ", $owner // "(none)",
				" [", $pid // "none", "]";
		}
		$owner or ++$err;
	}
	exit !!$err;
} else {
	warn "At least one bus name must be provided.\n";
	exit 2;
}
