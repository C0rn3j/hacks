#!/usr/bin/env python
# encoding: utf-8
from __future__ import print_function
import sys
import termios

modes = {
	"rgb": "256-color pallette – 6*6*6 RGB subset",
	"gray": "256-color pallette – grayscale subset",
	"sys": "256-color pallette – ansicolor subset",
	"iso": "ISO 8-color pallette",
}

properties = {
	"red": (0, 5),
	"green": (0, 5),
	"blue": (0, 5),
	"color": (0, 15),
	"gray": (0, 23),
}

class State(dict):
	def copy(self):
		return State(self)

	def incr(self, *props):
		for prop in props:
			minval, maxval = properties[prop]
			if self[prop] < maxval:
				self[prop] += 1

	def decr(self, *props):
		for prop in props:
			minval, maxval = properties[prop]
			if self[prop] > minval:
				self[prop] -= 1

	def incr_carry(self, *props):
		for prop in props:
			minval, maxval = properties[prop]
			if self[prop] < maxval:
				self[prop] += 1
				break
			else:
				self[prop] = 0

	def decr_carry(self, *props):
		for prop in props:
			minval, maxval = properties[prop]
			if self[prop] > minval:
				self[prop] -= 1
				break
			else:
				self[prop] = maxval

	def reset(self, *props):
		for prop in props:
			minval, maxval = properties[prop]
			self[prop] = int((minval+maxval)/2.0)

	def toggle(self, *flags):
		for flag in flags:
			if flag in self["flags"]:
				self["flags"].remove(flag)
			else:
				self["flags"].add(flag)

	def getcolor(self, iso=False):
		if iso and self["mode"] == "iso":
			return self["color"]
		elif self["mode"] == "sys":
			return self["color"]
		elif self["mode"] == "rgb":
			return 16 + self["red"]*36 + self["green"]*6 + self["blue"]
		elif self["mode"] == "gray":
			return 232 + self["gray"]
		else:
			return None

	def fmt(self, flags=True, bg=False):
		out = ""

		# output basic SGR

		sgr = []

		if flags:
			sgr += self["flags"]

		if self["mode"] == "iso":
			color = self["color"]
			if color > 7:
				color -= 8
				if 1 not in sgr:
					sgr.append(1)
			color += 40 if bg else 30
			sgr.append(color)

		if len(sgr) > 0:
			sgr.sort()
			out += "\033[%sm" % ";".join(map(str, sgr))

		# output 256-color

		color = self.getcolor()

		if color is not None:
			out += "\033[%d;5;%dm" % (48 if bg else 38, color)

		return out

	@property
	def ansi(self):
		return self.fmt(True)

def getch():
	import sys, tty, termios
	fd = sys.stdin.fileno()
	old = termios.tcgetattr(fd)
	try:
		#tty.setraw(fd)
		return sys.stdin.read(1)
	finally:
		termios.tcsetattr(fd, termios.TCSADRAIN, old)

def icanon(mode):
	fd = sys.stdin.fileno()
	flags = termios.tcgetattr(fd)
	if mode:
		flags[3] &= ~termios.ICANON & ~termios.ECHO
	else:
		flags[3] |= termios.ICANON | termios.ECHO
	termios.tcsetattr(fd, 0, flags)

def bar(name, state, prop, scale=2):
	minval, maxval = properties[prop]
	newstate = state.copy()
	out = "%10s: [" % name
	for val in range(minval, maxval+1):
		newstate[prop] = val
		out += newstate.fmt(flags=False) + "#"*scale
	out += "\033[m] %d" % state[prop]
	print(out)

	out = "%10s   " % ""
	for val in range(minval, maxval+1):
		out += ("^" if val == state[prop] else " ") * scale
	print(out)

if not sys.stdin.isatty():
	sys.stdin = open("/dev/tty", "r")

state = State()
state["mode"] = "rgb"
state["flags"] = set()
state.reset("red", "green", "blue", "color", "gray")

sys.stdout.write("\033[?47h") # enable alternate buffer
sys.stdout.write("\033[?25l") # hide cursor
sys.stdout.flush()
icanon(True)

char = "x"

class Sgr(object):
	BOLD = 1
	DARK = 2
	UNDERLINE = 4
	REVERSE = 7
	STRIKE = 9

	names = {
		BOLD: "bold",
		DARK: "dark",
		UNDERLINE: "underline",
		REVERSE: "reverse",
		STRIKE: "strike",
	}

while True:
	print("\033[H\033[2J", end="")

	print("    ┌" + "─"*20 + "┬" + "─"*20 + "┬" + "─"*20 + "┐")
	print("    │%-20s│%-20s│%-20s│" %
		("default bg", "iso black bg", "iso white bg"))
	line = "    │"
	line += "\033[49m" + state.fmt() + char*20 + "\033[m│"
	line += "\033[40m" + state.fmt() + char*20 + "\033[m│"
	line += "\033[47m" + state.fmt() + char*20 + "\033[m│"
	print("\n".join([line]*3))
	print("    │%-20s│%-20s│%-20s│" %
		("default fg", "iso black fg", "iso white fg"))
	line = "    │"
	line += "\033[39m" + state.fmt(bg=True) + char*20 + "\033[m│"
	line += "\033[30m" + state.fmt(bg=True) + char*20 + "\033[m│"
	line += "\033[37m" + state.fmt(bg=True) + char*20 + "\033[m│"
	print("\n".join([line]*3))
	print("    └" + "─"*20 + "┴" + "─"*20 + "┴" + "─"*20 + "┘")
	print()

	if state["mode"] == "rgb":
		print("%11s" % "keys:", "red 7/9, green 4/6, blue 1/3, all +/-")
	elif state["mode"] in {"sys", "iso"}:
		print("%11s" % "keys:", "color +/-")
	elif state["mode"] == "gray":
		print("%11s" % "keys:", "level +/-")

	print("%11s" % "", "mode g/G, format b/D/u/S/r, reset 0")
	print()

	if state["mode"] == "rgb":
		bar("red", state, "red", 3)
		bar("green", state, "green", 3)
		bar("blue", state, "blue", 3)
	elif state["mode"] in {"sys", "iso"}:
		bar("color", state, "color", 2)
	elif state["mode"] == "gray":
		bar("gray", state, "gray", 1)

	print("%11s" % "mode:", modes[state["mode"]])
	fmtfgstr = state.fmt(flags=True).replace("\033", "\\e")
	fmtbgstr = state.fmt(flags=True, bg=True).replace("\033", "\\e")
	print("%11s" % "code:",
		fmtfgstr, "(fg),",
		fmtbgstr, "(bg)")
	style = [Sgr.names[f] for f in state["flags"]]
	style.append("color%d" % state.getcolor(iso=True))
	print("%11s" % "name:", " + ".join(style))

	k = getch()
	if k == "Q":		break
	elif k == "b":		state.toggle(Sgr.BOLD)
	elif k == "D":		state.toggle(Sgr.DARK)
	elif k == "u":		state.toggle(Sgr.UNDERLINE)
	elif k == "r":		state.toggle(Sgr.REVERSE)
	#elif k == "B":		state.toggle(5)
	elif k == "S":		state.toggle(Sgr.STRIKE)
	elif state["mode"] == "rgb":
		if k == "g":	state["mode"] = "sys"
		elif k == "G":	state["mode"] = "gray"
		elif k in "7q":	state.decr("red")
		elif k in "8w":	state.reset("red")
		elif k in "9e":	state.incr("red")
		elif k in "4a":	state.decr("green")
		elif k in "5s":	state.reset("green")
		elif k in "6d":	state.incr("green")
		elif k in "1z":	state.decr("blue")
		elif k in "2x":	state.reset("blue")
		elif k in "3c":	state.incr("blue")
		elif k in "-":	state.decr("red", "green", "blue")
		elif k in "0":	state.reset("red", "green", "blue")
		elif k in "+":	state.incr("red", "green", "blue")
		elif k in "/":	state.decr_carry("blue", "green", "red")
		elif k in "*":	state.incr_carry("blue", "green", "red")
	elif state["mode"] == "sys":
		if k == "g":		state["mode"] = "iso"
		elif k == "G":		state["mode"] = "rgb"
		elif k in "741qaz-":	state.decr("color")
		elif k in "852wsx0":	state.reset("color")
		elif k in "963edc+":	state.incr("color")
	elif state["mode"] == "iso":
		if k == "g":		state["mode"] = "gray"
		elif k == "G":		state["mode"] = "sys"
		elif k in "741qaz-":	state.decr("color")
		elif k in "852wsx0":	state.reset("color")
		elif k in "963edc+":	state.incr("color")
	elif state["mode"] == "gray":
		if k == "g":		state["mode"] = "rgb"
		elif k == "G":		state["mode"] = "iso"
		elif k in "741qaz-":	state.decr("gray")
		elif k in "852wsx0":	state.reset("gray")
		elif k in "963edc+":	state.incr("gray")

icanon(False)
sys.stdout.write("\033[?25h") # show cursor
sys.stdout.write("\033[?47l") # disable alternate buffer
sys.stdout.flush()
