#!/usr/bin/env perl
use warnings;
use strict;
use feature qw(say switch);
use Getopt::Std;

sub usage {
	say for
		"Usage: kl [-c <ccname> | -l]",
		"",
		"\t-c       show contents of given ccache",
		"\t-l       list known ccaches",
		;
	exit 2;
}

sub uniq { my %seen; grep {!$seen{$_}++} @_; }

sub interval {
	my $end = shift;
	my $start = shift // time;
	my ($dif, $s, $m, $h, $d);

	$dif = $end - $start;
	$dif -= $s = $dif % 60; $dif /= 60;
	$dif -= $m = $dif % 60; $dif /= 60;
	$dif -= $h = $dif % 24; $dif /= 24;
	$d = $dif + 0;

	if ($d > 1)	{ "${d} days" }
	elsif ($h > 0)	{ "${h}h ${m}m" }
	elsif ($m > 1)	{ "${m} mins" }
	else		{ "a minute" }
}

sub mangle_name {
	join ".", reverse split qr|[/.]|, (shift)->{server_name};
}

sub enum_ccaches {
	my @ccaches;

	open(my $proc, "-|", "pklist", "-l")
		or die "'pklist' not found\n";
	while (<$proc>) {
		my @l = split(/\t/, $_);
		given (shift @l) {
			when ("cache") {
				my ($ccache, $princ) = @l;
				push @ccaches, [$ccache, $princ];
			}
		}
	}
	close($proc);

	return @ccaches;
}

sub display_ccache {
	my ($ccache) = @_;

	my @pklist_args;
	my @fields;
	my $cache;
	my $defprinc;
	my $defrealm;
	my @extrealms;
	my %tgtcreds;
	my %creds;
	my $init;
	my $tgt;

	# read tickets from ccache

	if (defined $ccache) {
		push @pklist_args, ("-c", $ccache);
	}
	open(my $proc, "-|", "pklist", @pklist_args)
		or die "Please install 'pklist' to use this tool.\n";

	while (<$proc>) {
		chomp;
		my @l = split(/\t/, $_);
		given (shift @l) {
			when ("cache") {
				($cache, $defprinc) = @l;
				# If I ever decide to merge the 'cache' line formats in pklist.
				if (defined $defprinc) {
					($defrealm) = $defprinc =~ /@([^@]+)$/;
				}
			}
			when ("principal") {
				($defprinc) = @l;
				($defrealm) = $defprinc =~ /@([^@]+)$/;
			}
			when ("CREDENTIALS") {
				@fields = @l;
			}
			when ("ticket") {
				my %tkt = ();
				@tkt{@fields} = @l;
				my ($name, $realm) = $tkt{server_name} =~ /^(.+)@([^@]*)$/;
				push @extrealms, $realm
					unless $realm eq $defrealm;

				if ($name =~ m|^krbtgt/(.+)|) {
					push @{$tgtcreds{$1}}, \%tkt;
					push @extrealms, $1
						unless $1 eq $defrealm;
					if ($1 eq $realm) {
						$tgt = \%tkt;
					}
					if ($tkt{flags} =~ /I/) {
						$init = \%tkt;
					}
				} else {
					push @{$creds{$realm}}, \%tkt;
				}
			}
		}
	}
	close($proc);

	if (!defined $cache) {
		return 1;
	}

	# format TGT expiration time

	my $expirystr;
	my $expiry = $init->{expiry_time} || $tgt->{expiry_time};
	if ($expiry <= time) {
		$expirystr = "\e[1;31m" . "expired" . "\e[m";
	} elsif ($expiry <= time+3600) {
		$expirystr = "\e[1;33m" . "expires in ".interval($expiry) . "\e[m";
	} else {
		$expirystr = "expires in ".interval($expiry);
	}

	# output tickets sorted by realm, server name

	say "Credentials for \e[1m${defprinc}\e[m (${expirystr}):";
	say "";

	my @realms = ($defrealm,
			# TODO: ugly
			uniq sort {$a eq '' ? 1 : $b eq '' ? -1 : $a cmp $b} @extrealms);

	for my $realm (@realms) {
		$tgtcreds{$realm} //= [];
		$creds{$realm} //= [];

		my @creds = (@{$tgtcreds{$realm}},
				sort {mangle_name($a) cmp mangle_name($b)} @{$creds{$realm}});

		if (!@{$tgtcreds{$realm}}) {
			my ($color, $label);
			if ($realm eq '') {
				$color = "32";
				$label = "tickets for empty realm";
			} else {
				$color = "35";
				$label = "tickets for '$realm' (no TGT)";
			}

			say " "x4,
				"\e[${color}m",
				$label,
				"\e[m",
				;
		}

		for my $tkt (@creds) {
			my $color = "0";
			my $label = "";
			my $width = 0;
			my $istgt = 0;
			my $isinit = 0;

			my ($svname, $svrealm) = $tkt->{server_name} =~ /^(.+)@(.*)$/;

			if ($svname =~ m|^krbtgt/(.+)$|) {
				my $nextrealm = $1;
				$istgt = 1;

				$color = $svrealm eq $nextrealm
					? "1;32"
					: $svrealm eq $defrealm
					? "1;35"
					: "1;34"
					;
				$label .= "\e[${color}m${svname}\e[m";
				$width += length $svname;

				if ($svrealm ne $nextrealm) {
					$color = $svrealm eq $defrealm ? "35" : "34";
					$label .= " \e[${color}m\@ ${svrealm}\e[m";
					$width += length " \@ $svrealm";
				}
			} else {
				$label .= " "x2;
				$width += 2;

				$width += length $svname;
				$svname =~ s|/([^.]+)\.|/\e[1m$1\e[m.|;
				$label .= $svname;

				if ($tkt->{client_name} ne $defprinc) {
					my ($defname) = ($tkt->{client_name} =~ /^(.+)@/);
					$width += length " for $defname";
					$label .= " \e[36mfor \e[1m$defname\e[m";
				}
				if ($svrealm eq "") {
					$width += length " (no realm)";
					$label .= " \e[32m(no realm)\e[m";
				}
			}
			
			my $flags = $tkt->{flags};
			my @eflags = ();
			$flags =~ /A/ or push @eflags, "!A";
			$flags =~ s/[AT]//g;
			if ($istgt) {
				$flags =~ s/[P]//g;
			} else {
				$flags =~ s/[FR]//g;
			}
			$flags = join(" ", $flags, @eflags);

			my $expiry = $tkt->{expiry_time} <= time
					? "expired"
					: interval($tkt->{expiry_time});

			my $expiry_c = ($tkt->{expiry_time} <= time
					? "\e[1;31m"
					: $tkt->{expiry_time} <= time+300
					? "\e[33m"
					: "").$expiry."\e[m";

			say " "x4,
				$label,
				" "x(45-$width),
				" ",
				$flags,
				" "x(5-length $flags),
				" ",
				" "x(8-length $expiry),
				$expiry_c,
				;
		}
	}

	say "";
	return 0;
}

my %opts;
my $ccache	= undef;
my $list_all	= 1;

getopts('c:lL', \%opts) or usage();
if (exists $opts{c}) {
	$ccache = $opts{c};
	$list_all = 0;
} elsif (exists $opts{l}) {
	$list_all = 1;
} elsif (exists $opts{L}) {
	$list_all = 0;
}

my @visible;

if ($list_all) {
	@visible = map {$_->[0]} sort {$a->[1] cmp $b->[1]} enum_ccaches();
} else {
	@visible = ($ccache);
}

if (@visible) {
	display_ccache($_) for @visible;
} else {
	say "No credentials cache found.";
}
