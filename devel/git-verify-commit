#!/usr/bin/env python
# git-extract-tag -- extract 'merged tags' from Git merge commits, to verify
#                    their signatures
import sys
import subprocess
from io import BytesIO

def parse_object(stream):
    in_head = True
    field = None
    value = b""

    for line in stream:
        if in_head:
            if line == b"\n":
                if field is not None:
                    yield (field, value)
                in_head = False
                field = None
                value = b""
            elif line.startswith(b" "):
                if field is None:
                    raise IOError("object starts with continuation")
                value += line[1:]
            else:
                if field is not None:
                    yield (field, value)
                field, value = line.split(b" ", 1)
        else:
            value += line
    yield (field, value)

def verify_commit(stream):
    
    for field, value in parse_object(stream):
        if field == b"gpgsig":
            subprocess.call(["git", "cat-file", "tag", tag_hash])
            subprocess.call(["git", "verify-tag", tag_hash])

            #proc = subprocess.Popen(["gpg", "--verify"],
            #                        stdin=subprocess.PIPE, stdout=subprocess.PIPE)
            #proc.stdin = open("/dev/stdout", "wb")
            #proc.stdin.write(b"-----BEGIN PGP SIGNED MESSAGE-----\n")
            #proc.stdin.write(b"Hash: SHA1\n")
            #proc.stdin.write(b"\n")
            #proc.stdin.write(value)
            #proc.stdin.close()

            #buf = BytesIO(value)
            #for field, value in 

objs = sys.argv[1:]

if objs:
    for commit_hash in objs:
        with subprocess.Popen(["git", "cat-file", "commit", commit_hash],
                              stdout=subprocess.PIPE) as proc:
            verify_commit(proc.stdout)
else:
    with open("/dev/stdin", "rb") as stdin:
        verify_commit(stdin)
