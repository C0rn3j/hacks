#!/usr/bin/env perl
# goto-vim - open vim with a specific file and position taken from primary
# selection.  Usually symlinked to 'vim' or even 'v'.

use feature qw(switch);
no if $] >= 5.017011, warnings => qw(experimental::smartmatch);

# this matches (url-decoded):
#   file:///foo/bar → /foo/bar

my $fileurlre = qr{ \b file:// (/\S+) }mx;

# this matches URLs:

my $urlre = qr{ \b ((?:https?|ftps?|sftp) :// \S+) }mx;

# this matches:
#   filename:lineno
#   filename:lineno:garbage
#   filename:lineno,garbage
#   filename:lineno garbage
#   filename:/regex
#   filename:/regex garbage

my $specre = qr{ ^ ([^:]+) : (\d+ | /[^/]\S*) (?:[:,\s].*)? $ }mx;

# this matches:
#   a/foo/bar → foo/bar

my $diffpathre = qr{ ^ [a-z] / (.+) $ }mx;

# this matches:
#   ./path
#   ./path:garbage
#   /path
#   /path:garbage

my $pathre = qr{ (?<!\w) (\.? / [^:]+) }mx;

# this matches grep context lines:
#   filename-lineno-garbage
# low priority because of possible ambiguity

my $ctxspecre = qr{ ^ ([^:]+?) - (\d+) - .* $ }mx;

# this matches:
#   File "/foo/bar", line 123,

my $pythonre = qr{ ^ \s* File \s "(.+?)", \s line \s (\d+) }mx;

# this script is usually symlinked as ~/bin/vim, so
# it needs to run the real vim by absolute path

my $vim = "/usr/bin/vim";

my @args = "vim";

sub debug {
	warn @_ if $ENV{DEBUG};
}

sub urldecode {
	my $str = shift;
	$str =~ s/%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;
	return $str;
}

sub shescape {
	my $str = shift;
	if ($str =~ /!/) {
		$str =~ s/'/'\\''/g;
		$str = qq['$str'];
	}
	elsif ($str =~ s/[`"\$\\]/\\$&/g or $str =~ /\s/) {
		$str = qq["$str"];
	}
	return $str;
}

sub parse {
	for (shift) {
		when ($pythonre) {
			debug "pythonre: $& -> '$1' '$2'\n";
			my ($file, $line) = ($1, $2);
			return ($file, "+".$line);
		}
		when ($fileurlre) {
			debug "fileurlre: '$&' -> '$1'\n";
			my ($file) = (urldecode($1));
			return ($file) if -e $file;
		}
		when ($urlre) {
			debug "urlre: '$&'\n";
			my ($url) = ($1);
			return ($url);
		}
		when ($specre) {
			debug "specre: '$&' -> '$1' '$2'\n";
			my ($file, $cmd) = ($1, $2);
			$file =~ s|^~/|$ENV{HOME}/|;
			$cmd =~ s|^|+|;
			return ($file, $cmd) if -e $file;
		}
		when ($diffpathre) {
			debug "diffpathre: '$&'\n";
			my ($file) = ($1);
			return ($file);
		}
		when ($pathre) {
			debug "pathre: '$&' -> '$1'\n";
			my ($file) = ($1);
			return ($file) if -e $file;
		}
		when ($ctxspecre) {
			debug "ctxspecre: '$&' -> '$1' '$2'\n";
			my ($file, $cmd) = ($1, $2);
			$file =~ s|^~/|$ENV{HOME}/|;
			$cmd =~ s|^|+|;
			return ($file, $cmd) if -e $file;
		}
		when (-e $_) {
			debug "-e: $_\n";
			return ($_);
		}
		when (/^(.+)$/m && -e $1) {
			debug "-e: $1\n";
			return ($1);
		}
		default {
			return;
		}
	}
	return;
}

if (@ARGV) {
	for my $arg (@ARGV) {
		if (my @r = parse($arg)) {
			push @args, @r;
		} else {
			push @args, $arg;
		}
	}
} elsif (length $ENV{DISPLAY}) {
	if (my @r = parse(`xclip -o -s primary`)) {
		push @args, @r;
		print join(" ", map {shescape($_)} @args), "\n";
	}
}


exec {$vim} @args;
