#!/usr/bin/env python
# Takes a file and finds all commits that reference the corresponding blob

"""Usage:
    git find-blob <file to find> [start-commit]
    git find-blob <blob SHA> [start-commit]

If <start-commit> is not specified, HEAD is used."""

from __future__ import print_function
import re
import subprocess
import sys

batch_proc = None

seen_trees = {}

def get_tree_items(sha):
    proc = subprocess.Popen(["git", "ls-tree", "-l", sha],
                            stdout=subprocess.PIPE)
    for line in proc.stdout:
        v = line.rstrip(b"\n").split(None, 4)
        (_, item_type, item_sha, item_size, item_name) = v
        if item_size == b"-":
            item_size = -1
        else:
            item_size = int(item_size)
        yield (item_type, item_sha, item_size, item_name)

def get_commit_tree(sha):
    global batch_proc
    if not batch_proc:
        batch_proc = subprocess.Popen(["git", "cat-file", "--batch-check"],
                                       stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    batch_proc.stdin.write(sha + b"^{tree}\n")
    batch_proc.stdin.flush()
    line = batch_proc.stdout.readline()
    obj_sha, obj_type_size = line.rstrip().split(None, 1)
    if obj_type_size == b"missing":
        raise IOError("failed to dereference %s^{tree}" % sha_fmt(sha))
    else:
        return obj_sha

def iter_commits(start="HEAD"):
    proc = subprocess.Popen(["git", "rev-list", start],
                            stdout=subprocess.PIPE)
    for line in proc.stdout:
        yield line.rstrip()

def get_tree_size_recursive(tree_sha):
    global seen_trees
    if tree_sha not in seen_trees:
        total_size = 0
        for item_type, item_sha, item_size, item_name in get_tree_items(tree_sha):
            if item_type == b"tree":
                total_size += get_tree_size_recursive(item_sha)
            elif item_size >= 0:
                total_size += item_size
            else:
                print("warning: skipping %r %s [%r]" % (item_type, sha_fmt(item_sha), item_size))
        seen_trees[tree_sha] = total_size
    return seen_trees[tree_sha]

def sha_fmt(sha):
    return sha.decode("us-ascii")

def status(msg=""):
    sys.stderr.write("\r\033[K\033[32m%s\033[m\r" % msg)
    sys.stderr.flush()

def main():
    if len(sys.argv) > 1:
        start_commit = sys.argv[1]
        print("starting at commit %r" % start_commit)
    else:
        start_commit = "HEAD"

    try:
        n_commits = 0

        for commit_sha in iter_commits(start_commit):
            n_commits += 1
            if n_commits % 5 == 0:
                pass
                #status("checking commit %s (#%d)" % (sha_fmt(commit_sha), n_commits))
            tree_sha = get_commit_tree(commit_sha)
            tree_size = get_tree_size_recursive(tree_sha)
            print("%10d %s" % (tree_size, sha_fmt(commit_sha)))
    except KeyboardInterrupt:
        status("interrupted at commit %s" % (sha_fmt(commit_sha)))
        print()
    else:
        status("finished after %d commits" % n_commits)
        print()

if __name__ == '__main__':
    main()
