#!/usr/bin/env python
import sys
import subprocess

def get_tree_items(sha) -> "sha[]":
    proc = subprocess.Popen(["git", "ls-tree", sha_hex(sha)],
                            stdout=subprocess.PIPE)
    for line in proc.stdout:
        _, item_type, item_sha, _ = line.split()
        yield (item_type, item_sha)

def get_commit_tree(sha) -> "tree sha":
    proc = subprocess.Popen(["git", "cat-file", "commit", sha_hex(sha)],
                            stdout=subprocess.PIPE)
    line = proc.stdout.readline()
    if line[:5] == b"tree ":
        return sha_unhex(line[5:45])
    else:
        raise IOError("malformed commit %r" % sha_fmt(sha))

def iter_commits() -> "commit sha[]":
    proc = subprocess.Popen(["git", "rev-list", "--all"],
                            stdout=subprocess.PIPE)
    for line in proc.stdout:
        yield line.rstrip()

def recurse_tree_for_blob(tree_sha, blob_sha):
    global seen_trees
    if tree_sha not in seen_trees:
        result = False
        for item_type, item_sha in get_tree_items(tree_sha):
            if item_type == b"blob" and item_sha == blob_sha:
                result = True
            elif item_type == b"tree":
                result = recurse_tree_for_blob(item_sha, blob_sha)
            if result:
                break
        seen_trees[tree_sha] = result
    return seen_trees[tree_sha]

def hash_file(path) -> "blob sha":
    proc = subprocess.Popen(["git", "hash-object", path],
                            stdout=subprocess.PIPE)
    line = proc.stdout.readline()
    if line:
        sha = sha_unhex(line.rstrip())
        return sha
    else:
        raise IOError("could not hash blob")

def sha_fmt(sha) -> "str":
    return sha.decode("us-ascii")

def sha_hex(sha) -> "hexstr":
    return sha

def sha_unhex(hexstr) -> "sha":
    return hexstr

path = sys.argv[1]

file_sha = hash_file(path)

seen_trees = {}

for commit_sha in iter_commits():
    tree_sha = get_commit_tree(commit_sha)
    if recurse_tree_for_blob(tree_sha, file_sha):
        print("found in commit %s" % sha_fmt(commit_sha))
