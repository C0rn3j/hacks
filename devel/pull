#!/usr/bin/env bash
# pull - update version control repositories to latest upstream versions

. lib.bash || exit

is() {
	local dir=$(realpath --relative-to="$_PULL_STARTDIR" "$PWD")
	if [[ $1 == none ]]; then
		log2 "skipping '$dir' (unknown)"
	else
		log2 "updating '$dir' ($1)"
	fi
}

log:() {
	lib::msg "$*" 'log' '\e[32m' ' >' '\e[35m'
	"$@"
}

upd:() {
	local old=$1 new=$2 cmd=("${@:3}")
	local bold= reset=
	if [[ -t 1 ]]; then
		bold=$'\e[1m' reset=$'\e[m'
	fi
	if [[ "$old" != "$new" ]]; then
		log "Updated from ${bold}${old}${reset} to ${bold}${new}${reset}"
		echo " # ${cmd[*]}"
	fi
}

svnsync() {
	local lib=$(which libfunsync.so 2>/dev/null)
	if [[ -f $lib ]]; then
		env LD_PRELOAD="$lib" svnsync "$@"
	else
		env svnsync "$@"
	fi
}

is_ignored() {
	[[ -u . ]]
}

do_pull() {
	if [[ -f Pullfile ]]; then
		do_main
	elif [[ -d .git/svn ]]; then
		is "Git – SVN clone"
		if remote=$(git config --get svn-remote.svn.url); then
			rroot=$(svn info "$remote" | sed -n 's/^Repository Root: //p')
			if [[ $rroot == file://* ]]; then
				log: svnsync sync "$rroot"
			fi
		fi
		log: git svn fetch
		d=$(git rev-parse --git-dir)
		h=$(< "$d/HEAD")
		if [[ $h == 'ref: refs/heads/'* ]]; then
			br=${h#'ref: refs/heads/'}
			if [[ $(git config branch.$br.remote) == . ]] &&
			   [[ $(git config branch.$br.merge) == refs/remotes/* ]]
			then
				rev() { git rev-parse --verify HEAD; }
				old=$(rev)
				log: git merge --ff-only
				new=$(rev)
				if [[ "$old" != "$new" ]]; then
					old=${old:0:12}
					new=${new:0:12}
					upd: "$old" "$new" tig $old..$new
				fi
			fi
		fi
	elif [[ -d .git ]]; then
		is "Git"
		rev() { git rev-parse --verify ${1:-HEAD}; }
		old=$(rev)
		if log: git pull --ff-only; then
			new=$(rev)
			if [[ -e .gitmodules ]]; then
				log: git submodule update
			fi
		else
			new=$(rev @{u})
			log: git --no-pager diff --stat "@{u}@{1}".."@{u}"
		fi
		if [[ "$old" != "$new" ]]; then
			old=${old:0:12}
			new=${new:0:12}
			upd: "$old" "$new" tig $old..$new
		fi
	elif [[ -d .hg ]]; then
		is "Mercurial"
		rev() { hg tip -q; }
		old=$(rev)
		log: hg pull --update
		new=$(rev)
		upd: "$old" "$new" hg log -r ${old#*:}:${new#*:} --pager always
	elif [[ -d .svn ]]; then
		is "SVN"
		rev() { svnversion; }
		old=$(rev)
		rroot=$(svn info "$remote" | sed -n 's/^Repository Root: //p')
		if [[ $rroot == file://* ]]; then
			log: svnsync sync "$rroot"
		fi
		log: svn update
		new=$(rev)
		upd: "$old" "$new" svn log -v -r "$old:$new"
	elif [[ -d .bzr ]]; then
		is "Bazaar"
		rev() { bzr revno; }
		old=$(rev)
		log: bzr pull
		new=$(rev)
		upd: "$old" "$new" bzr log -r$((old+1))..$new
	elif [[ -f .fslckout ]]; then
		is "Fossil"
		rev() { fossil info | awk '$1 == "checkout:" {print $2}'; }
		old=$(rev)
		log: fossil update
		new=$(rev)
		upd: "$old" "$new" fossil timeline after "$old"
	elif [[ -d CVS ]]; then
		is "CVS"
		log: cvs -q up -d -P -A
	elif [[ -f format && -f hooks/pre-revprop-change ]]; then
		is "SVN – svnsync mirror"
		log: svnsync sync "file://$PWD"
	elif [[ "$(git config core.bare)" == "true" ]]; then
		is "Git – bare repository"
		rev() { git rev-parse --verify HEAD; }
		old=$(rev)
		log: git fetch
		new=$(rev)
		if [[ "$old" != "$new" ]]; then
			git --no-pager diff --stat "$old" "$new"
			old=${old:0:12}
			new=${new:0:12}
			upd: "$old" "$new" tig "$old..$new"
		fi
	else
		is none
	fi
}

do_main() {
	if [[ ! $_PULL_STARTDIR ]]; then
		export _PULL_STARTDIR=$PWD
	fi

	if (( ! $# )) && [[ -s Pullfile ]]; then
		set -- $(grep '^[^#]' Pullfile)
	fi

	if (( ! $# )); then
		set -- */
	fi

	if (( $# )); then
		declare -A did
		for arg; do
			debug "arg '$arg'"

			if [[ $arg == -* ]]; then
				# TODO: support glob-like exclusions
				# @(...) might be useful
				arg=${arg#-}
				if [[ ! -d $arg ]]; then
					debug "exclusion is not a directory, ignoring"
					continue
				fi
				dir=$(readlink -f "$arg")
				debug "excluding '$dir'"
				did[$dir]=y
				continue
			fi

			if [[ ! -d $arg ]]; then
				err "not a directory: '$arg'"
				continue
			fi

			dir=$(readlink -f "$arg")
			debug "updating '$dir'"
			if [[ ! ${did[$dir]} ]]; then
				did[$dir]=y
				(cd "$dir" && ! is_ignored && do_pull)
			fi
		done
	else
		do_pull
	fi
}

do_main "$@"

(( !errors ))
