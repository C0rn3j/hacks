#!/usr/bin/env bash

msg() { printf "\e[1;32m==\e[m \e[1m%s\e[m\n" "$*"; }

if [ $# -ne 2 ]; then
	echo "Usage: git link-history <old> <new>"
	echo ""
	echo "<old> is last commit of old history"
	echo "<new> is initial commit of new history"
	exit 2
fi >&2

oldhead_ref=$1
newinit_ref=$2

oldhead=$(git rev-parse --verify "$oldhead_ref")
newinit=$(git rev-parse --verify "$newinit_ref")

if [ "$oldhead" = "$newinit" ]; then
	echo "error: identical commits given"
	exit 1
fi >&2

if git rev-parse --quiet --verify "$newinit^" >/dev/null; then
	echo "error: start of new history has a parent"
	echo "(did you mix up the argument order?)"
	git log "$newinit" -n 2 --format=short
	exit 1
fi >&2

if ! git rev-parse --quiet --verify "$oldhead^" >/dev/null; then
	echo "error: end of old history has no parent"
	echo "(did you mix up the argument order?)"
	git log "$newinit" -n 2 --format=short
	exit 1
fi >&2

newfake=$(git cat-file commit "$newinit" \
	| sed "/^tree /aparent $oldhead" \
	| git hash-object -t commit -w --stdin)

diff -u <(git cat-file commit "$newinit") --label "commit $newinit" \
	<(git cat-file commit "$newfake") --label "commit $newfake" \
	|| true

git replace -f "$newinit" "$newfake"

msg "Linked history:"
git log -n 2 "$newinit"
