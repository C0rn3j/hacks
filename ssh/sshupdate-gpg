#!/usr/bin/env bash
SOURCE_URL="http://purl.net/net/grawity/files/authorized_keys.txt"
SIGNER_KEY_ID="D24F6CB2C1B52632"
SIGNER_KEY_FP="2357E10CEF4F7ED27E233AD5D24F6CB2C1B52632"
KEYSERVER="pool.sks-keyservers.net"
#KEYSERVER="pgp.uni-mainz.de"

have() { command -v "$1" &> /dev/null; }

. ~/code/lib/bash/http_fetch || exit 1

usage() {
	echo "Usage: sshupdate-gpg [-r] [-v]"
	echo
	echo "  -r  retrieve key"
	echo "  -v  verbose mode"
	echo
	echo "Key locations are hardcoded in $0."
} >&2

recv_key() {
	local grip=$1
	local server=$KEYSERVER
	$VERBOSE && echo "sshup: recv-key $grip from $server"
	local out=$(gpg --status-fd 1 --keyserver "$server" --recv-key "$grip" 2>&1)
	local gpg_status=$?
	if ! grep -qs "^\[GNUPG:\] IMPORT_OK " <<< "$out"; then
		[[ $out ]] && echo "$out" >&2
		echo "sshup: fetching key $grip from $server failed (gpg returned $gpg_status)" >&2
		return 1
	else
		$VERBOSE && echo "$out"
		return 0
	fi
}

tryfetch() {
	local url=$1 out=$2
	local max_tries=3 retry_wait=3 attempt=0
	while (( ++attempt <= max_tries )); do
		$VERBOSE && echo "Fetching $url (attempt $attempt)"
		if http_fetch "$url" "$out"; then
			return 0
		else
			rm -f "$out"; sleep $retry_wait
		fi
	done
	echo "sshup: gave up fetching $url after $attempt tries" >&2
	return 1
}

verify() {
	local file=$1
	local out=$(gpg --status-fd 1 --verify "$file" 2>/dev/null)
	if grep -Eqs "^\[GNUPG:\] (ERROR|NODATA|BADSIG)( |\$)" <<< "$out" ||
		! grep -qs "^\[GNUPG:\] GOODSIG $SIGNER_KEY_ID " <<< "$out" ||
		! grep -qs "^\[GNUPG:\] VALIDSIG $SIGNER_KEY_FP " <<< "$out" ||
		! grep -qs "^\[GNUPG:\] TRUST_ULTIMATE\$" <<< "$out"
	then
		{ echo "$out"; echo "sshup: failed to verify $file"; } >&2
		return 1
	else
		$VERBOSE && echo "$out"
		return 0
	fi
}

VERBOSE=false
while getopts "hvr" OPT "$@"; do
	case "$OPT" in
	'v')	VERBOSE=true ;;
	'r')	recv_key "$SIGNER_KEY_FP" && gpg --edit-key "$SIGNER_KEY_FP" trust quit ;;
	'?')	usage; exit 2 ;;
	esac
done

if ! have gpg; then
	echo "sshup: 'gpg' not found in \$PATH" >&2
	exit 1
fi

if ! gpg --list-keys "$SIGNER_KEY_FP" &> /dev/null; then
	echo "sshup: signer key $SIGNER_KEY_FP not in keyring" >&2
	exit 1
fi

umask 077
mkdir -p ~/.ssh/

recv_key "$SIGNER_KEY_FP" >&2 || exit 1

temp=$(mktemp ~/.ssh/authorized_keys.XXXXXX)
if ! tryfetch "$SOURCE_URL" "$temp"; then
	echo "sshup: failed to fetch $SOURCE_URL" >&2
	exit 1
fi

if verify "$temp"; then
	{
		echo "# updated $(date +"%Y-%m-%d %H:%M") from $SOURCE_URL"
		gpg --decrypt "$temp" 2> /dev/null
	} > ~/.ssh/authorized_keys
	rm -f "$temp"
fi

if [ -f ~/.ssh/authorized_keys.local ]; then
	{
		echo "# keys from ~/.ssh/authorized_keys.local"
		cat ~/.ssh/authorized_keys.local
	} >> ~/.ssh/authorized_keys
fi
