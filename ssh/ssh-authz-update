#!/usr/bin/env bash
# ssh-authz-update - authorized_keys updater tool
#
# Supports filtering keys by hostname or FQDN.
#   - Start filtered region with '#if <glob>' where <glob> is bash's extended glob.
#     <glob> will be checked against both the hostname from $(hostname) and the FQDN from DNS.
#   - There is no '#elseif' or nesting; use '#if' to start a new region.
#   - End region with '#endif'.
# Example:
#   ssh-rsa .... global key
#   #if *.cluenet.org
#   ssh-rsa .... cluenet-only key
#   #if @(*.home|*.nullroute.eu.org)
#   ssh-rsa .... home-only key
#   #endif

SOURCE_URL="http://purl.net/net/grawity/files/authorized_keys.txt"
SIGNER_KEY_ID="D24F6CB2C1B52632"
SIGNER_KEY_FP="2357E10CEF4F7ED27E233AD5D24F6CB2C1B52632"
KEYSERVER="pgp.surfnet.nl"

PATH="$HOME/code/bin:$PATH"
VERBOSE=""
FQDN=$(fqdn) || exit 1

. lib.bash		|| exit 1
. libfilterfile.bash	|| exit 1
. libhttpfetch.bash	|| exit 1

usage() {
	echo "Usage: $progname [-r] [-v]"
	echo ""
	echo "  -r  retrieve key"
	echo "  -v  verbose mode"
	echo ""
	echo -e "\e[1m""WARNING: Running this script will replace your keys with grawity's!""\e[m"
	echo ""
	echo "Key locations are hardcoded in $0."
	exit 2
} >&2

recv_key() {
	local grip=$1
	local server=$KEYSERVER
	say "updating key $grip from $server"
	local out=$(gpg --status-fd 1 --keyserver "$server" --recv-key "$grip" 2>&1)
	local gpg_status=$?
	if ! grep -qs "^\[GNUPG:\] IMPORT_OK " <<< "$out"; then
		[[ $out ]] && echo "$out" >&2
		warn "receiving key $grip from $server failed (gpg returned $gpg_status)"
		return 1
	else
		say "$out"
		return 0
	fi
}

tryfetch() {
	local url=$1 out=$2
	local max_tries=3 retry_wait=3 attempt=0
	while (( ++attempt <= max_tries )); do
		say "fetching $url (attempt $attempt)"
		if http_fetch "$url" "$out"; then
			return 0
		else
			rm -f "$out"; sleep $retry_wait
		fi
	done
	warn "gave up fetching $url after $attempt tries"
	return 1
}

verify() {
	local file=$1
	debug "verifying signature of '$file'"
	local out=$(gpg --status-fd 1 --verify "$file" 2>/dev/null)
	if grep -Eqs "^\[GNUPG:\] (ERROR|NODATA|BADSIG)( |\$)" <<< "$out" ||
		! grep -qs "^\[GNUPG:\] GOODSIG $SIGNER_KEY_ID " <<< "$out" ||
		! grep -qs "^\[GNUPG:\] VALIDSIG $SIGNER_KEY_FP " <<< "$out" ||
		! grep -qs "^\[GNUPG:\] TRUST_ULTIMATE\$" <<< "$out"
	then
		{ echo "$out"; echo "$progname: failed to verify $file"; } >&2
		return 1
	else
		say "$out"
		return 0
	fi
}

filter_keys() {
	filter_file 'match_hostname'
}

debug=":"

while getopts "D:hvr" OPT "$@"; do
	case "$OPT" in
	'D')	debug+="${OPTARG}:";;
	'v')	VERBOSE=true ;;
	'r')	if confirm "import key ${SIGNER_KEY_FP}?"; then
			recv_key "$SIGNER_KEY_FP" &&
			echo -e 'trust\n5\ny\nquit\n' |
			gpg --batch --command-fd=0 --edit-key "$SIGNER_KEY_FP"
		fi;;
	'?')	usage;;
	esac
done

if [[ $debug == *:filter:* ]]; then
	filter_keys
	exit
fi

if ! have gpg; then
	die "'gpg' not found in \$PATH"
fi

if ! gpg --list-keys "$SIGNER_KEY_FP" &> /dev/null; then
	die "key $SIGNER_KEY_FP not in keyring (use ${progname} -r to import)"
fi

# main code

umask 077

mkdir -pm 0700 ~/.ssh

recv_key "$SIGNER_KEY_FP" >&2 || exit 1

temp=$(mktemp ~/.ssh/authorized_keys.XXXXXX)
if ! tryfetch "$SOURCE_URL" "$temp"; then
	die "failed to fetch $SOURCE_URL"
fi

if verify "$temp"; then
	{
		echo "# updated $(date +"%Y-%m-%d %H:%M") from $SOURCE_URL"
		gpg --decrypt "$temp" 2> /dev/null
	} | filter_keys > ~/.ssh/authorized_keys
	rm -f "$temp"
fi

if [[ -s ~/.ssh/authorized_keys.local ]]; then
	{
		echo ""
		echo "# keys from ~/.ssh/authorized_keys.local"
		cat ~/.ssh/authorized_keys.local
	} | filter_keys >> ~/.ssh/authorized_keys
fi
