#!/usr/bin/env python
# Automatic /etc/motd header+news generator.
# Status: core stuff working (news item formatting);
#   needs to read the news items from somewhere.

from operator import attrgetter
import textwrap
import time

Months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
	'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']

def textformat(s):
	patterns = (
		(r'<u>', '\033[4m'),
		(r'</u>', '\033[m'),
	)
	for p, r in patterns:
		s = re.sub(p, r, s)
	return s

class NewsItem():
	colors = {
		"critical"	: '31', # red
		"warn"		: '33', # yellow
		"info"		: '32', # green
		"notice"	: '35', # purple
	}

	maxwidth = 79

	sep = " - "

	date_format = "%b %d"

	def __init__(self, date, text, priority="notice"):
		self.date_tm = time.strptime(date, "%Y-%m-%d")
		self.date_ts = time.mktime(self.date_tm)
		self.text = text
		self.priority = priority
		self.age = (time.time()-self.date_ts)/86400
	
	def __str__(self):
		date = self.fmt_date(self.date_format)
		color = self.get_color()
		indent = len(date)+len(self.sep)
		dateansi = "\033[%sm%s\033[m" % (color, date)
		text = textwrap.wrap(self.text, self.maxwidth-indent)
		return dateansi + self.sep + ("\n" + " "*indent).join(text)

	def fmt_date(self, fmt="%Y-%m-%d"):
		return time.strftime(fmt, self.date_tm)

	def get_color(self):
		color = self.colors.get(self.priority, self.colors["notice"])
		if self.age < 3:
			color = "1;%s" % color
		return color

print open("/etc/motd.header").read(),

items = []

for line in open("/home/grawity/trash/news"):
	date, prio, text = line.split('\t', 2)
	text = text.strip()
	items.append( NewsItem(date, text, prio) )

items.sort(key=attrgetter("date_ts"))

for item in items:
	if item.age > 30:
		continue
	else:
		print item
