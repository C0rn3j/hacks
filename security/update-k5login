#!/usr/bin/env python
import os
import fnmatch
import getopt
import socket
import sys

def getfqdn(host=None):
	host = host or socket.gethostname()
	try:
		ai = socket.getaddrinfo(host, None, 0, 0, 0, socket.AI_CANONNAME)
		return ai[0][3] if ai else host
	except:
		return host

def read_rules(rules_file):
	defprinc = None
	principals = []
	rules = {}
	lineno = 0
	for line in open(rules_file, "r"):
		lineno += 1
		line = line.rstrip()
		if not line or line.startswith("#"):
			continue

		if line[0].isspace():
			masks = line.split()
		else:
			line = line.split()
			defprinc = line[0]
			masks = line[1:]

		if not defprinc:
			sys.stderr.write("warning: missing principal on line %d\n" % lineno)
			continue
		if defprinc not in rules:
			principals.append(defprinc)
			rules[defprinc] = set()
		rules[defprinc] |= set(masks)

	return principals, rules

rules_file = os.path.expanduser("~/lib/dotfiles/k5login.rules")
k5login_file = os.path.expanduser("~/.k5login")
verbose = False

opts, args = getopt.getopt(sys.argv[1:], "i:o:v")
for opt, optarg in opts:
	if opt == "-v":		verbose = True
	elif opt == "-i":	rules_file = optarg
	elif opt == "-o":	k5login_file = optarg

fqdn = getfqdn()
if verbose:
	sys.stderr.write("fqdn: %s\n" % fqdn)
	sys.stderr.write("rules_file: %s\n" % rules_file)
	sys.stderr.write("k5login_file: %s\n" % k5login_file)

principals, rules = read_rules(rules_file)

outfd = open(k5login_file, "w")
for princ in principals:
	masks = rules[princ]
	if any(map(lambda mask: fnmatch.fnmatch(fqdn, mask), masks)):
		outfd.write(princ+"\n")
outfd.close()
