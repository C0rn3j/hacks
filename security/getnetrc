#!/usr/bin/env perl
# getnetrc - ~/.netrc query tool
#
# Released under WTFPL v2 <http://sam.zoy.org/wtfpl/>
use v5.8;
use warnings;
use strict;
use Getopt::Long qw(:config gnu_getopt no_ignore_case);
use Net::Netrc;

my $format		= "%l:%p";
my $format_nonewline	= 0;
my $format_url_encode	= 0;
my $service		= undef;
my $service_required	= 0;
my $no_default		= 0;

sub msg_usage {
	print STDERR "Usage: getnetrc [-dnsu] [-f format] [service@]machine [login]\n";
	return 2;
}

sub msg_help {
	msg_usage;
	print
'
  -d    disable fallback to \'default\' entry
  -n    do not print final newline
  -f    format the output as specified (default is %l:%p)
  -s    if \'service@machine\' was given, disable fallback to \'machine\'
  -u    URL-encode each item separately

Format strings:
  %m, %h       result machine (hostname)
  %l, %u       result login (username)
  %p           result password
  %a           result account
  %M           query machine
  %S           query service
  %%, %n, %0   percent sign, newline, null byte

The .netrc file format is described in the manual page of ftp(1), with
exception of the \'service@machine\' extension specific to grawity\'s netrc.
';
	return 0;
}

sub lookup {
	my ($machines, $login) = @_;
	my $fallback;
	for my $machine (@$machines) {
		my $en = Net::Netrc->lookup($machine, $login);
		if (defined $en) {
			if (defined $en->{machine}) {
				return $en;
			} elsif (!$no_default) {
				$fallback //= $en;
			}
		}
	}
	return $fallback;
}

# parse format string
sub fmt {
	my ($str, %data) = @_;
	$data{"%"} = "%";
	$str =~ s/(%(.))/exists $data{$2}?(defined $data{$2}?$data{$2}:""):$1/ge;
	return $str;
}

sub uri_encode {
	my $str = shift;
	$str =~ s/([^A-Za-z0-9.!~*'()-])/sprintf("%%%02X", ord($1))/seg if defined($str);
	return $str;
}

### Command line options
GetOptions(
	"f|format=s"		=> \$format,
	"n|no-newline"		=> \$format_nonewline,
	"u|urlencode"		=> \$format_url_encode,
	"s|service-required"	=> \$service_required,
	"d|no-default"		=> \$no_default,
	"help"			=> sub { exit msg_help },
) or exit msg_usage;

my $machine = shift @ARGV;
my $login = shift @ARGV;
exit msg_usage()
	unless defined($machine) && length($machine);

if ($machine =~ /^(.+)@(.+)$/) {
	$service = $1;
	$machine = $2;
}

my @machines;
push @machines, $service.'@'.$machine
	if defined($service);
push @machines, $machine
	unless defined($service) && $service_required;
my $entry = lookup(\@machines, $login)
	|| exit 1;

### Display results
my %output = (
	a => $entry->{account},
	h => $entry->{machine},
	l => $entry->{login},
	m => $entry->{machine},
	p => $entry->{password},
	u => $entry->{login},
	M => $machine,
	S => $service,
	);
if ($format_url_encode) {
	$output{$_} = uri_encode($output{$_}) for keys %output;
}
@output{"n", "0"} = ("\n", "\0");

if (!$format_nonewline) {
	$format .= '%n';
}
print fmt($format, %output);
