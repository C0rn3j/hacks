#!/usr/bin/env bash
# ssh-authz-update - authorized_keys updater tool
#
# Supports filtering keys by hostname or FQDN.
#   - Start filtered region with '#if <glob>' where <glob> is bash's extended glob.
#     <glob> will be checked against both the hostname from $(hostname) and the FQDN from DNS.
#   - There is no '#elseif' or nesting; use '#if' to start a new region.
#   - End region with '#endif'.
# Example:
#   ssh-rsa .... global key
#   #if *.cluenet.org
#   ssh-rsa .... cluenet-only key
#   #if @(*.home|*.nullroute.eu.org)
#   ssh-rsa .... home-only key
#   #endif

SRCURL="http://nullroute.eu.org/~grawity/files/authorized_keys.txt"
KEYFP="2357E10CEF4F7ED27E233AD5D24F6CB2C1B52632"
[[ $KEYSERVER ]] || KEYSERVER="hkp://pgp.mit.edu"

PATH="$HOME/code/bin:$PATH"
FQDN=$(fqdn || hostname)

. lib.bash		|| exit
. libfilterfile.bash	|| exit
. libhttpfetch.bash	|| exit

usage() {
	echo "Usage: $progname [-Frv]"
	echo ""
	echo "  -F  test key filter"
	echo "  -r  receive signing key"
	echo "  -v  verbose"
	echo ""
	echo -e "\e[1mWARNING: This script will replace your keys with grawity's!\e[m"
	exit 2
} >&2

recv_key() {
	local key=$1 out=
	if out=$($GPG --keyserver "$KEYSERVER" --recv-key "$key" 2>&1); then
		say "$out"
	else
		echo "$out" >&2
		warn "failed to receive key $key from $KEYSERVER"
		return 1
	fi
}

fetch() {
	local url=$1 out=$2
	local max_tries=3 retry_wait=3 attempt=1
	while true; do
		say "fetching $url (#$attempt)"
		if http_fetch "$url" "$out"; then
			return 0
		fi
		rm -f "$out"
		if (( attempt++ >= max_tries )); then
			break
		fi
		sleep $retry_wait
		(( retry_wait *= 2 ))
	done
	err "failed to fetch $url"
	return 1
}

verify() {
	local file=$1 out=
	debug "verifying signature of $file"
	if out=$($GPG --status-fd 1 --verify "$file" 2>/dev/null) &&
	   grep -qs "^\[GNUPG:\] VALIDSIG $KEYFP " <<<"$out" &&
	   grep -qs "^\[GNUPG:\] TRUST_ULTIMATE\$" <<<"$out"; then
		say "$out"
	else
		echo "$out" >&2
		err "failed to verify $file"
		return 1
	fi
}

filter_keys() {
	filter_file 'match_hostname'
}

filter=false
import=false
file="$HOME/.ssh/authorized_keys"

umask 077

while getopts "Frv" OPT "$@"; do
	case "$OPT" in
	'F')	filter=true;;
	'r')	import=true;;
	'v')	VERBOSE=true;;
	'?')	usage;;
	esac
done

if $filter; then
	filter_keys
	exit
fi

# find the tool

if have gpg2; then
	GPG=gpg2
elif have gpg; then
	GPG=gpg
else
	die "'gpg' not found in \$PATH"
fi

# ensure key exists in keyring
	
if $import; then
	if confirm "import key $KEYFP?"; then
		VERBOSE=true recv_key "$KEYFP" &&
		echo "$KEYFP:6:" | $GPG --import-ownertrust
	else
		exit
	fi
elif $GPG --list-keys "$KEYFP" >/dev/null; then
	recv_key "$KEYFP"
else
	die "key $KEYFP not in keyring"
fi

# download new pubkeys

mkdir -p -m 0700 "${file%/*}"

temp=$(mktemp "$file.XXXXXXXX") || exit

if fetch "$SRCURL" "$temp" && verify "$temp"; then
	{
	echo "# updated: at $(date +"%Y-%m-%d %H:%M")"
	echo "# updated: from $SRCURL"
	$GPG --decrypt "$temp" 2>/dev/null
	if [ -s "$file.local" ]; then
		echo "# updated: from $file.local"
		cat "$file.local"
	fi
	} | filter_keys >"$file"
fi

rm -f "$temp"
