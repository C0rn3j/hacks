#!/usr/bin/env python
# ssh-duphosts v1.2
# Checks for duplicate entries in ~/.ssh/known_hosts
from __future__ import print_function
from operator import itemgetter
import os
import sys
import getopt

def is_ip(addr):
	if addr.startswith("["):
		addr = addr[1:addr.find("]:")]

	if ":" in addr:
		return True

	if all(x.isdigit() for x in addr.split(".")):
		return True

	return False

class Hostname(object):
	def __init__(self, value):
		self.value = value
		self.comparable = value.split(",", 1)[0]

	def __hash__(self):
		return hash(self.value)

	def __str__(self):
		return str(self.value)

	def __gt__(self, other):
		self_d = is_ip(self.comparable)
		other_d = is_ip(other.comparable)

		if self_d and not other_d:
			return True
		elif other_d and not self_d:
			return False
		else:
			return self.comparable > other.comparable

knownhosts_path = os.path.expanduser("~/.ssh/known_hosts")
do_filter = False

opts, args = getopt.getopt(sys.argv[1:], 'f')
for opt, optarg in opts:
	if opt in ('f', '-f'):
		do_filter = True
if args:
	knownhosts_path = args.pop(0)

keys = {}
fh = open(knownhosts_path, "r")

# check for duplicates
for line in fh:
	line = line.strip()
	if line == "" or line.startswith("#"):
		continue
	
	host, ktype, key = line.split(" ", 2)

	try:
		int(ktype)
	except ValueError:
		pass
	else:
		key = ktype + " " + key
		ktype = "(sshv1-rsa)"

	if (ktype, key) in keys:
		keys[ktype, key].append(host)
	else:
		keys[ktype, key] = [host]

# print results
if do_filter:
	byhosts = {}

	for entry in keys:
		ktype, key = entry
		hosts = sorted(keys[entry], key=Hostname)
		hosts = ",".join(hosts)
		hosts = Hostname(hosts)
		byhosts[hosts, ktype] = key

	for entry in sorted(byhosts, key=itemgetter(0)):
		hosts, ktype = entry
		key = byhosts[entry]
		if ktype == "(sshv1-rsa)":
			print(hosts, key)
		else:
			print(hosts, ktype, key)
else:
	for entry in keys:
		hosts = keys[entry]
		ktype, key = entry
		if len(hosts) > 1:
			print("Key [%(shortkey)s] has %(count)d entries:" % {
				"shortkey": ktype + " ..." + key[-15:],
				"count": len(hosts)
			})
			print("\t%s" % "\n\t".join(hosts))
