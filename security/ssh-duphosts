#!/usr/bin/env python
# ssh-duphosts v1.4
# Checks for duplicate entries in ~/.ssh/known_hosts
from __future__ import print_function
from operator import itemgetter
import os
import sys
import getopt

class Hostname(object):
	def __init__(self, value):
		self.value = value
		self.comparable = value.split(",", 1)[0]

	def __hash__(self):
		return hash(self.value)

	def __str__(self):
		return str(self.value)

	def __gt__(self, other):
		self_d = is_ip(self.comparable)
		other_d = is_ip(other.comparable)

		if self_d and not other_d:
			return True
		elif other_d and not self_d:
			return False
		else:
			return self.comparable > other.comparable

def is_ip(addr):
	if addr.startswith("["):
		addr = addr[1:addr.find("]")]

	if ":" in addr:
		return True

	if all(x.isdigit() for x in addr.split(".")):
		return True

	return False

def find_duplicates(fh):
	keys = {}

	for line in fh:
		line = line.strip()
		if line == "" or line.startswith("#"):
			continue

		if line.startswith("@"):
			tag, host, ktype, key = line.split(" ", 3)
			host = tag + " " + host
		else:
			host, ktype, key = line.split(" ", 2)

		try:
			int(ktype)
		except ValueError:
			pass
		else:
			key = ktype + " " + key
			ktype = "(sshv1-rsa)"

		if (ktype, key) in keys:
			keys[ktype, key].append(host)
		else:
			keys[ktype, key] = [host]

	return keys

def print_duplicates(keys):
	for entry in keys:
		hosts = keys[entry]
		ktype, key = entry
		if len(hosts) > 1:
			print("Key [%(shortkey)s] has %(count)d entries:" % {
				"shortkey": ktype + " ..." + key[-15:],
				"count": len(hosts)
			})
			print("\t%s" % "\n\t".join(hosts))

def print_merged(bykey):
	byhost = {}

	for entry in bykey:
		ktype, key = entry
		host = sorted(bykey[entry], key=Hostname)
		host = ",".join(host)
		host = Hostname(host)
		byhost[host, ktype] = key

	hosts = list(byhost.keys())
	hosts.sort(key=itemgetter(1))
	hosts.sort(key=itemgetter(0))

	for entry in hosts:
		host, ktype = entry
		key = byhost[entry]
		if ktype == "(sshv1-rsa)":
			print(host, key)
		else:
			print(host, ktype, key)

opt_input = os.path.expanduser("~/.ssh/known_hosts")
opt_merge = False

opts, args = getopt.getopt(sys.argv[1:], 'm')
for opt, optarg in opts:
	if opt in ('m', '-m'):
		opt_merge = True

if args:
	opt_input = args.pop(0)

if opt_input == "-":
	keys = find_duplicates(sys.stdin)
else:
	fh = open(opt_input, "r")
	keys = find_duplicates(fh)
	fh.close()

if opt_merge:
	print_merged(keys)
else:
	print_duplicates(keys)
