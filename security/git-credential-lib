#!/usr/bin/env python2
from __future__ import print_function
import sys

def usage():
	print("usage: %s <store> <operation>" % sys.argv[0])
	sys.exit(2)

def attr_is_private(k):
	return k in ("password",)

def attr_public(attr):
	return dict((k, attr[k]) for k in attr if not attr_is_private(k))

def make_uri(attr):
	uri = ""
	if "protocol" in attr:
		uri += "%(protocol)s://" % attr
	if "host" in attr:
		if "username" in attr:
			uri += "%(username)s@" % attr
		uri += attr["host"]
		if "port" in attr:
			uri += ":%(port)s" % attr
		uri += "/"
	if "path" in attr:
		uri += attr["path"]
	return uri

class CredStore(object):
	def __init__(self):
		raise NotImplementedError()

	def handle(self, op, *args, **kwargs):
		if not self.available():
			return {}
		try:
			func = getattr(self, "_cred_%s" % op)
		except AttributeError:
			return {}
		else:
			return func(*args, **kwargs) or {}
	
	def available(self):
		return False

class DummyLoopbackStore(CredStore):
	def __init__(self):
		pass

	def available(self):
		return True

	def _cred_get(self, attr):
		print("get", attr, file=sys.stderr)
		return attr

	def _cred_store(self, attr):
		print("store", attr, file=sys.stderr)
		return None

	def _cred_erase(self, attr):
		print("erase", attr, file=sys.stderr)
		return None

class GnomeKeyringStore(CredStore):
	def __init__(self):
		import glib
		import gnomekeyring

		glib.set_application_name("git")

		self.gk = gnomekeyring

	def available(self):
		return self.gk and self.gk.is_available()

	def map_attributes(self, inattr):
		outattr = {}
		for key, val in inattr.items():
			if key == "host":
				outattr["server"] = val
			elif key in ("port", "protocol"):
				outattr[key] = val
			elif key == "username":
				outattr["user"] = val
			else:
				outattr["git:%s" % key] = val
		return outattr

	def unmap_attributes(self, outattr):
		inattr = {}
		for key, val in outattr.items():
			if key.startswith("git:"):
				inattr[key[4:]] = val
			elif key in ("port", "protocol"):
				inattr[key] = val
			elif key == "server":
				inattr["host"] = val
			elif key == "user":
				inattr["username"] = val
			else:
				inattr[key] = val
		return inattr

	def _cred_get(self, attr):
		find_type = self.gk.ITEM_NETWORK_PASSWORD
		find_attr = self.map_attributes(attr_public(attr))

		try:
			results = self.gk.find_items_sync(find_type, find_attr)
		except self.gk.NoMatchError:
			return None

		for res in results:
			attr.update(res.attributes)
			attr["password"] = res.secret

		return self.unmap_attributes(attr)

	def _cred_store(self, attr):
		keyring = self.gk.get_default_keyring_sync()
		item_type = self.gk.ITEM_NETWORK_PASSWORD
		display_name = attr["host"]
		item_attr = self.map_attributes(attr_public(attr))
		secret = attr["password"]
		update = True

		self.gk.item_create_sync(keyring, item_type, display_name,
					item_attr, secret, update)

	def _cred_erase(self, attr):
		find_type = self.gk.ITEM_NETWORK_PASSWORD
		find_attr = self.map_attributes(attr_public(attr))

		try:
			results = self.gk.find_items_sync(find_type, find_attr)
		except self.gk.NoMatchError:
			return None
		
		for res in results:
			if "password" in attr and res.secret != attr["password"]:
				continue
			self.gk.item_delete_sync(res.keyring, res.item_id)


stores = {
	"dummy": DummyLoopbackStore,
	"gnomekeyring": GnomeKeyringStore,
}

if __name__ == "__main__":
	try:
		store, op = sys.argv[1:]
	except ValueError:
		usage()

	if store not in stores:
		print("error: store %r not supported" % store, file=sys.stderr)
		sys.exit(1)

	attr = {}

	# Let's assume UTF-8 inputs, even though gitcredentials(7) says otherwise.
	# DBus dislikes binary anyway...

	sys.stdin = open("/dev/stdin", "rb")
	#sys.stdout = open("/dev/stdout", "wb")

	for line in sys.stdin:
		try:
			_ = line.decode("utf-8")
			key, val = line.rstrip("\n").split("=", 1)
		except ValueError:
			print("error: invalid input %r" % line, file=sys.stderr)
			sys.exit(1)
		else:
			attr[key] = val

	cred = stores[store]().handle(op, attr)

	if cred:
		for key, val in cred.items():
			line = "%s=%s\n" % (key, val)
			sys.stdout.write(line)
