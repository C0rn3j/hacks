#!/bin/sh
# gencommit -- committed identity generator
#   (see http://en.wikipedia.org/wiki/Wikipedia:CID for explanation)
#
# - The commitment secret is generated by hashing:
#
#   domain + " " + date + " " + passphrase
#
# - The hash function is SHA-1 (hashfunc="sha1").
# 
# - The date format is "%Y-%m-%d".
#
# - The commitment itself is generated by hashing the secret once.
#
# - The commitment is formatted as:
#
#   commitment + " " + date + " " + hashfunc

fmtseed() { printf '%s %s %s' "$@"; }
fmtcommit() { printf '%s %s %s' "$@"; }
fmtdate() { date -d "$1" +'%Y-%m-%d'; }
fmthashfunc() { printf '%s' "$1" | tr 'A-Z' 'a-z' | tr -d -c 'a-z0-9'; }

stop() { echo "$*" >&2; exit 1; }

colwidth=11

readc() { read -p "$(printf '%*s ' $colwidth "$1")" -r "${@:2}"; }
echoc() { printf "%*s %s\n" $colwidth "$1" "${*:2}"; }

domain=$1
date=$2
hash=$3
hash=$(fmthashfunc "${hash:-sha1}")

case $hash in
    sha1)
	hash() { sha1sum | awk '{print $1}'; };;
    sha256)
	hash() { sha256sum | awk '{print $1}'; };;
    *)
	echo "Unsupported hash '$hash'" >&2
	exit 1
esac

if [[ "$domain" ]]; then
	echoc "domain:" "$domain"
else
	readc "domain?" -e -i "$domain" domain
fi

if ! [[ "$domain" ]]; then
	stop "Domain is empty."
fi

if [[ "$date" ]]; then
	date=$(fmtdate "$date")
	echoc "date:" "$date"
else
	readc "date?" -e -i "$date" date
	date=$(fmtdate "${date:-today}")
fi

if ! [[ "$date" ]]; then
	stop "Invalid date."
fi

readc "passphrase?" -s passphrase; echo

if ! [[ "$passphrase" ]]; then
	stop "Passphrase is empty."
fi

echoc "seed:" "$(fmtseed "$domain" "$date" "...")"

secret=$(fmtseed "$domain" "$date" "$passphrase" | hash)

echoc "secret:" "$(printf '\e[31m%s\e[m' "$secret")"

commitment=$(printf '%s' "$secret" | hash)

echoc "commitment:" "$(fmtcommit "$commitment" "$date" "$hash")"
