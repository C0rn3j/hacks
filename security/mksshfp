#!/usr/bin/env python3
# mksshfp - convert OpenSSH public keys to DNS SSHFP records

from __future__ import print_function
import sys
import hashlib
import nullroute as lib
import nullroute.authorized_keys as authorized_keys

KEY_TYPES = {
    "ssh-rsa":              1,
    "ssh-dss":              2,
    "ecdsa-sha2-nistp256":  3,
    "ecdsa-sha2-nistp384":  3,
    "ecdsa-sha2-nistp521":  3,
    "ssh-ed25519":          4,
}

HASH_TYPES = [
    (1, hashlib.sha1),
    (2, hashlib.sha256),
]

def parse(path):
    for line in open(path):
        line = line.strip()
        if not line or line.startswith("#"):
            continue

        try:
            key = authorized_keys.PublicKey(line)
        except ValueError:
            lib.die("parse error at: %r" % line)

        if key.algo not in KEY_TYPES:
            lib.err("no SSHFP type for '%s' keys" % key.algo)
            continue

        for hash_id, hash_func in HASH_TYPES:
            keyhash = hash_func(key.blob)
            hexhash = keyhash.hexdigest()
            yield {
                "key": key,
                "hash_id": hash_id,
                "hash": keyhash.digest(),
                "rrdata": "%d %d %s" % (KEY_TYPES[key.algo],
                                        hash_id,
                                        keyhash.hexdigest())
            }

try:
    host = sys.argv[1]
    infile = sys.argv[2]
except IndexError:
    lib.die("missing host and pubkey-file parameters")

for entry in parse(infile):
    print("%s\t%s\t%s" % (host, "SSHFP", entry["rrdata"]))

lib.exit()
