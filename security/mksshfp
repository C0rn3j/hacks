#!/usr/bin/env python3
# mksshfp - convert OpenSSH public keys to DNS SSHFP records

from __future__ import print_function
import os
import sys
import hashlib
import nullroute as lib
import nullroute.authorized_keys as authorized_keys

KEY_ALGOS = {
    "ssh-rsa":              1,
    "ssh-dss":              2,
    "ecdsa-sha2-nistp256":  3,
    "ecdsa-sha2-nistp384":  3,
    "ecdsa-sha2-nistp521":  3,
    "ssh-ed25519":          4,
}

HASH_ALGOS = [
    #(1, hashlib.sha1),
    (2, hashlib.sha256),
]

def usage():
    print("usage: %s <hostname> [pubkey-file]" % lib.arg0)
    print()
    print("If pubkey-file is given, SSHFP records for all keys in that file will")
    print("be printed. Otherwise, your ~/.ssh/known_hosts will be searched for keys")
    print("with a matching hostname.")

def parse(path):
    for line in open(path):
        line = line.strip()
        if not line or line.startswith("#"):
            continue

        try:
            key = authorized_keys.PublicKey(line, host_prefix=True)
        except ValueError:
            lib.warn("parse error at: %r" % line)
            continue

        if key.algo not in KEY_ALGOS:
            lib.err("no SSHFP type for '%s' keys" % key.algo)
            continue

        for hash_id, hash_func in HASH_ALGOS:
            keyhash = hash_func(key.blob)
            hexhash = keyhash.hexdigest()
            yield {
                "key": key,
                "hash_id": hash_id,
                "hash_name": keyhash.name,
                "hash": keyhash.digest(),
                "rrdata": "%d %d %s" % (KEY_ALGOS[key.algo],
                                        hash_id,
                                        keyhash.hexdigest())
            }

def fmt_sshfp(host, pubkey):
    comment = "; (%s, %s)" % (entry["key"].algo, entry["hash_name"])
    record = "%s\t%s\t%s" % (host, "SSHFP", entry["rrdata"])
    #return "%s\n%s" % (comment, record)
    return "%s %s" % (record, comment)

try:
    host = sys.argv[1]
except IndexError:
    lib.die("missing host parameter")

try:
    infile = sys.argv[2]
except IndexError:
    infile = None

if host in {"--help", "-h", "-?"}:
    usage()
    sys.exit()

if infile:
    for entry in parse(infile):
        print(fmt_sshfp(host, entry))
else:
    infile = os.path.expanduser("~/.ssh/known_hosts")
    for entry in parse(infile):
        if host in set(entry["key"].hosts):
            print(fmt_sshfp(host, entry))

lib.exit()
