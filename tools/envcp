#!/usr/bin/env python
from __future__ import print_function
import os
import sys

def usage():
	print("Usage: envcp pid command [args ...]", file=sys.stderr)
	sys.exit(2)

def read_env(pid):
	env = []
	bufsize = 4096
	try:
		fd = open("/proc/%d/environ" % pid, "rb")
	except IOError as e:
		print("error: [%d] %s: %s" % (e.errno, e.strerror,
			e.filename))
		return None
	last = None
	while True:
		buf = fd.read(bufsize)
		bufs = buf.split(b'\0')
		if last is not None:
			bufs[0] = last+bufs[0]
			last = None
		if not buf.endswith(b'\0'):
			last = bufs.pop()
		env += bufs
		if len(buf) < bufsize:
			break
	fd.close()
	return dict(k.split(b'=', 1) for k in env if k != b'')
			

try:
	pid = int(sys.argv[1])
	cmd = sys.argv[2:]
except IndexError:
	# not enough arguments
	usage()
except ValueError:
	# pid is not integer
	print("error: pid must be an integer", file=sys.stderr())
	usage()

if not len(cmd):
	cmd = ["/usr/bin/env"]

env = read_env(pid)
if env:
	os.execvpe(cmd[0], cmd, env)
else:
	sys.exit(1)
