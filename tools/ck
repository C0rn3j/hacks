#!/usr/bin/env perl
use warnings;
use strict;
use constant {
	true => 1,
	false => 0,
};

use Net::DBus;
use Getopt::Long;

my $bus = Net::DBus->system;

my $ck = $bus->get_service("org.freedesktop.ConsoleKit");

my $manager = $ck->get_object("/org/freedesktop/ConsoleKit/Manager");

sub p(@) { print Dumper(@_); }

# http://www.freedesktop.org/software/ConsoleKit/doc/ConsoleKit.html#dbus-reference
#

my %commands = (
	"restart" => [
		[], "bool", sub {
			$manager->Restart()
		}],
	"stop" => [
		[], "bool", sub {
			$manager->Stop()
		}],
	"can-restart" => [
		[], "bool", sub {
			$manager->CanRestart()
		}],
	"can-stop" => [
		[], "bool", sub {
			$manager->CanStop()
		}],
	"get-seats" => [
		[], "seat[]", sub {
			my $seats = $manager->GetSeats();
			print @$seats;
		}],
	"get-sessions" => [
		[], "session[]", sub {
			my $sessions = $manager->GetSessions();
			print @$sessions;
		}],

	"get-current-session" => [
		[], "session", sub {
			print $manager->GetCurrentSession();
		}],
	"get-cookie-session" => [
		["cookie"], "session", sub {
			my ($cookie) = @_;
			print $manager->GetSessionForCookie($cookie);
		}],
	"get-process-session" => [
		["pid"], "session", sub {
			my ($pid) = @_;
			int $pid or return false;
			print $manager->GetSessionForUnixProcess($pid);
		}],
	"get-user-sessions" => [
		["uid"], "session[]", sub {
			my ($uid) = @_;
			int $uid or return false;
			my $sessions = $manager->GetSessionsForUnixUser($uid);
			print @$sessions;
		}],

	"get-session-device" => [
		["session"], "device", sub {
			my ($sessionid) = @_;
			my $session = $ck->get_object($sessionid);
			print $session->GetDisplayDevice();
		}],
	"get-session-hostname" => [
		["session"], "hostname", sub {
			my ($sessionid) = @_;
			my $session = $ck->get_object($sessionid);
			print $session->GetRemoteHostName();
		}],
	"get-session-idlesince" => [
		["session"], "x11-display", sub {
			my ($sessionid) = @_;
			my $session = $ck->get_object($sessionid);
			print $session->GetIdleSinceHint();
		}],
	"get-session-loginsid" => [
		["session"], "session_id", sub {
			my ($sessionid) = @_;
			my $session = $ck->get_object($sessionid);
			print $session->GetLoginSessionId();
		}],
	"get-session-seat" => [
		["session"], "seat", sub {
			my ($sessionid) = @_;
			my $session = $ck->get_object($sessionid);
			print $session->GetSeatId();
		}],
	"get-session-user" => [
		["session"], "uid", sub {
			my ($sessionid) = @_;
			my $session = $ck->get_object($sessionid);
			print $session->GetUnixUser();
		}],
	"get-session-x11device" => [
		["session"], "device", sub {
			my ($sessionid) = @_;
			my $session = $ck->get_object($sessionid);
			print $session->GetX11DisplayDevice();
		}],
	"get-session-x11display" => [
		["session"], "x11-display", sub {
			my ($sessionid) = @_;
			my $session = $ck->get_object($sessionid);
			print $session->GetX11Display();
		}],
	"is-session-active" => [
		["session"], "bool", sub {
			my ($sessionid) = @_;
			my $session = $ck->get_object($sessionid);
			$session->IsActive();
		}],
	"is-session-idle" => [
		["session"], "bool", sub {
			my ($sessionid) = @_;
			my $session = $ck->get_object($sessionid);
			$session->GetIdleHint();
		}],
	"is-session-local" => [
		["session"], "bool", sub {
			my ($sessionid) = @_;
			my $session = $ck->get_object($sessionid);
			$session->IsLocal();
		}],

	"get-seat-sessions" => [
		["seat"], "session[]", sub {
			my ($seatid) = @_;
			my $seat = $ck->get_object($seatid);
			my $sessions = $seat->GetSessions();
			print @$sessions;
		}],
	"get-seat-devices" => [
		["seat"], "device[]", sub {
			my ($seatid) = @_;
			my $seat = $ck->get_object($seatid);
			my $devices = $seat->GetDevices();
			for my $dev (@$devices) {
				print $dev;
			}
			true;
		}],
	"get-seat-active-session" => [
		["seat"], "session", sub {
			my ($seatid) = @_;
			my $seat = $ck->get_object($seatid);
			print $seat->GetActiveSession();
		}],
);

$, = $\ = "\n";

my $cmd = shift @ARGV // "help";
$cmd =~ s/^--//;

if ($cmd eq 'help') {
	print "Commands:";
	foreach $cmd (sort keys %commands) {
		my $in = join(",", @{$commands{$cmd}->[0]});
		my $out = $commands{$cmd}->[1];
		print "\t$cmd($in) -> $out";
	}
} elsif (exists $commands{$cmd}) {
	my ($in, $out, $sub) = @{$commands{$cmd}};
	if (scalar @$in > scalar @ARGV) {
		$in = join(",", @$in);
		print STDERR "Not enough arguments.";
		print STDERR "Usage: $cmd($in) -> $out";
		exit 2;
	} else {
		my $res = &$sub(@ARGV);
		if ($out eq 'bool') {
			exit !$res;
		} else {
			exit !$res;
		}
	}
} else {
	print STDERR "Unknown command.";
	exit 2;
}
