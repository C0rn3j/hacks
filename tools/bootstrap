#!/usr/bin/env bash
set -e
pullkey_host=equal.cluenet.org
forward_mail=grawity@gmail.com

have() { command -v "$1" >&/dev/null; }

log() { printf "\e[1;32m=\e[;1m %s\e[m\n" "$*"; }

log_ok() { printf "\e[1;34m=\e[m %s\e[m\n" "$*"; }

warn() { printf "\e[1;31m= %s\e[m\n" "$*"; }

confirm() {
	local msg=$1 ans=
	read -ep "$msg " -t 10 ans && [[ $ans == y ]]
}

check-gpg-version() {
	local version major minor rest
	version=$(gpg --version | sed 's/gpg (GnuPG) //; q')
	IFS="." read -r major minor rest <<< "$version"
	(( major >= 2 )) || (( major == 1 && minor >= 4 ))
}

if have getent; then
	read _ FQDN _ <<< "$(getent hosts "$HOSTNAME")"
else
	FQDN=$(hostname)
fi

if [[ ! -d ~/lib/dotfiles/.git ]]; then
	log "Cloning dotfiles.git"
	mkdir -p ~/lib
	git clone "https://github.com/grawity/dotfiles.git" \
		~/lib/dotfiles
	~/lib/dotfiles/install
else
	log_ok "~/lib/dotfiles is okay"
fi

if [[ ! -f ~/.ssh/authorized_keys ]]; then
	if have gpg && check-gpg-version; then
		log "Setting up sshupdate-gpg"
		~/code/ssh/sshupdate-gpg -rv
	elif have ssh-keygen && [[ ! -f ~/.ssh/id_sshupdate ]]; then
		log "Generating a key for sshupdate-ssh"
		opts=(-q -f ~/.ssh/id_sshupdate -N ""
			-C "$USER/sshupdate@$FQDN")
		ssh-keygen "${opts[@]}" -t ecdsa ||
		ssh-keygen "${opts[@]}" -t rsa -b 768
		log "Uploading key to $pullkey_host"
		cat ~/.ssh/id_sshupdate.pub |
			ssh $pullkey_host "~/bin/pullkey --install"
		log "Updating SSH keys"
		~/code/ssh/sshupdate-ssh
	else
		warn "Impossible to update SSH authorized_keys"
	fi
else
	num=$(grep -c '^[[:alpha:]]' ~/.ssh/authorized_keys)
	log_ok "authorized_keys has $num keys"
fi

set +e

if ! crontab -l 2>/dev/null | grep -Eqs "[[:space:]]ID=pull[[:space:]]|code/tools/pull"; then
	log "Adding tools/pull to crontab"
	(crontab -l 2>/dev/null || true;
		echo -e '@daily\tID=pull\t~/code/tools/pull') | crontab -
else
	log_ok "tools/pull is in crontab"
fi

set -e

if [[ $FQDN == "equal.cluenet.org" ]]; then
	log_ok "Skipping mail forward to avoid loop"
elif [[ ! -f ~/.forward ]]; then
	log "Forwarding mail to $forward_mail"
	echo "$forward_mail" > ~/.forward

	if have mail; then
		log "Sending a test email"
		(echo "Test";
			hostname -f;
			uname -a;
			id;
			have getent && getent passwd "$USER"
		) | mail -s "Test from $HOSTNAME" "$forward_mail"
	else
		warn "'mail' not available; cannot send test email"
	fi
else
	log_ok "Mail is being forwarded to $(sed 1q ~/.forward)"
fi
