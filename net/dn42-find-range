#!/usr/bin/env python3
from argparse import ArgumentParser
import hashlib
import ipaddress
import json
import os
from pprint import pprint
import requests
import sys
import time
import xdg.BaseDirectory

prefixes_url = "http://dataviz.polyno.me/dn42-netblock-visu/registry-prefixes.json"
metadata_url = "http://dataviz.polyno.me/dn42-netblock-visu/registry-inetnums.json"

class Cache(object):
    cache_dir = xdg.BaseDirectory.save_cache_path("nullroute.eu.org/url")
    expiry = 2 * 3600 # 2 hours

    @classmethod
    def load(self, name):
        path = os.path.join(self.cache_dir, "%s.json" % name)
        try:
            with open(path, "r") as fh:
                package = json.load(fh)
            if package.get("expire", 0) >= time.time():
                return package["data"]
            else:
                os.unlink(path)
        except FileNotFoundError:
            pass
        return None

    @classmethod
    def save(self, name, data, source=None):
        path = os.path.join(self.cache_dir, "%s.json" % name)
        package = {
            "source": source,
            "obtain": time.time(),
            "expire": time.time() + self.expiry,
            "data": data,
        }
        with open(path, "w") as fh:
            json.dump(package, fh)

def get_url(url, as_json=False):
    url_hash = hashlib.sha1(url.encode("utf-8")).hexdigest()
    data = Cache.load(url_hash)
    if not data:
        resp = requests.get(url)
        resp.raise_for_status()
        data = resp.text
        if as_json:
            data = json.loads(data)
        Cache.save(url_hash, data, source=url)
    return data

class Allocator(object):
    def __init__(self):
        self.prefixes = get_url(prefixes_url, as_json=True)
        self.metadata = get_url(metadata_url, as_json=True)

    def iter_prefixes(self):
        yield from self._iter_prefixes(self.prefixes)

    def _iter_prefixes(self, prefixes):
        for item in prefixes:
            yield item["prefix"]
            yield from self._iter_prefixes(item["children"])

    def find_prefix(self, prefix):
        return next(self._find_prefix(str(prefix), [self.prefixes]))

    def _find_prefix(self, prefix, prefixes):
        for item in prefixes:
            if item["prefix"] == prefix:
                yield item
            if item["children"]:
                yield from self._find_prefix(prefix, item["children"])

    def find_open_blocks(self):
        yield from self._find_open_blocks([self.prefixes])

    def _find_open_blocks(self, prefixes):
        for item in prefixes:
            p = item["prefix"]
            if p in self.metadata:
                m = self.metadata[p]
                if "open" not in m.get("policy", []):
                    pass
                elif "netname" not in m:
                    pass
                elif any(n.startswith("DN42-TRANSFER")
                         for n in m["netname"]):
                    continue # skip item and children
                elif any(n.startswith("NET-BLK") and n.endswith("-DN42")
                         for n in m["netname"]):
                    yield item, p, m
            if item["children"]:
                yield from self._find_open_blocks(item["children"])

    def find_free_blocks(self, prefix, want_bits=25):
        net = ipaddress.ip_network(prefix)

        if net.prefixlen > want_bits:
            raise ValueError("given network smaller than want_bits")

        #candidates = {net.prefixlen: [net]}
        #for bits in range(net.prefixlen, want_bits):
        #    subnet_bits = want_bits - bits
        #    candidates[bits+1] = []
        #    for try_net in candidates[bits]:
        #        for try_subnet in try_net.subnets(1):
        #            if str(try_subnet) not in self.metadata:
        #                candidates[bits+1].append(try_subnet)
        #pprint(candidates[want_bits])

        candidates = []
        for subnet in net.subnets(want_bits - net.prefixlen):
            partial = [subnet]
            if want_bits - net.prefixlen > 1:
                for bits in range(net.prefixlen + 1, want_bits):
                    supernet = subnet.supernet(want_bits - bits)
                    partial.append(supernet)
            if any([str(x) in self.metadata for x in partial]):
                continue
            candidates.append(subnet)

        # now make sure there are no smaller subnets allocated
        prefix_data = self.find_prefix(prefix)
        partial = set()
        for child in self._iter_prefixes(prefix_data["children"]):
            subnet = ipaddress.ip_network(child)
            if subnet.prefixlen > want_bits:
                supernet = subnet.supernet(subnet.prefixlen - want_bits)
                partial.add(supernet)

        return [c for c in candidates if c not in partial]

ap = ArgumentParser()
ap.add_argument("--max-per-block", type=int, default=50)
ap.add_argument("--json", action="store_true")
ap.add_argument("size")
opts = ap.parse_args()

max_results = opts.max_per_block

if opts.size[0] == "/":
    want_bits = int(opts.size[1:])
else:
    want_bits = int(opts.size)

if not opts.json:
    print("; Trying to find free /%d blocks" % want_bits)

a = Allocator()
seen = set()
results = []
for pp, p, m in a.find_open_blocks():
    n = ipaddress.ip_network(p)
    if n.prefixlen >= want_bits:
        continue
    rs = a.find_free_blocks(p, want_bits)
    if rs:
        if opts.json:
            results.append({
                "block": str(p),
                "name": m["netname"][0],
                "ranges": [str(r) for r in rs],
            })
        else:
            print("* %s (%s)" % (p, m["netname"][0]))
            for key in ["descr", "remarks"]:
                if key in m:
                    label = "%s:" % key
                    for val in m[key]:
                        print("  %s %s" % (label, val))
                        label = " " * len(label)
            if rs:
                seen |= set(rs)
                n = "1 block" if len(rs) == 1 else "%d blocks" % len(rs)
                if len(rs) > max_results+1:
                    rs = rs[:max_results//2] + ["..."] + rs[max_results//-2:]
                rs = ", ".join([str(n) for n in rs])
                print("  free: %s (%s)" % (rs, n))
            else:
                print("  free: (no space found)")
            print()

if opts.json:
    print(json.dumps(results))
else:
    if seen:
        print("; Found %d free blocks." % len(seen))
    else:
        print("; No free blocks found.")
