#!/usr/bin/env bash
# helper script for youtube-dl

. lib.bash || exit

usage() {
	echo "Usage: $progname [-tagopt...] [--dlopt...] URL"
	echo ""
	echo "  -tagopt       mp4tag option"
	echo "  --dlopt       youtube-dl option"
}

ffmpeg() { command ffmpeg -hide_banner "$@"; }

options=(
	--no-playlist
	--continue
	--write-info-json
	#--add-metadata
	#--xattrs
	)
url=''
tagopts=()
kind=music
justaudio=0
rename=0
m_artist=''
m_song=''

if (( DEBUG )); then
	options+=(--verbose)
fi

while (( $# )); do
	arg=$1
	case $arg in
	--help)
		usage; exit;;
	http://*|https://*)
		if [[ $url ]]; then
			die "only one URL can be specified"
		else
			url=$arg
		fi;;
	-justaudio)
		justaudio=1;;
	-rename)
		rename=1;;
	-kind|-type)
		kind=$2; shift;;
	-title|-song)
		m_song=$2;
		tagopts+=(-song "$2"); shift;;
	-artist)
		m_artist=$2;
		tagopts+=("$arg" "$2"); shift;;
	-disc|-disk)
		if [[ $2 == */* ]]; then
			tagopts+=(-disk "${2%%/*}" -disks "${2##*/}")
		else
			tagopts+=(-disk "$2")
		fi; shift;;
	-track)
		if [[ $2 == */* ]]; then
			tagopts+=(-track "${2%%/*}" -tracks "${2##*/}")
		else
			tagopts+=(-track "$2")
		fi; shift;;
	-show)
		kind=tvshow;
		tagopts+=("$arg" "$2"); shift;;
	-[a-z]*)
		tagopts+=("$arg" "$2"); shift;;
	*)
		options+=("$arg");;
	esac
	shift
done

[[ $url ]] || die "missing URL"

re_youtube_full='^https?://www.youtube.com/watch.*[?&]v=([A-Za-z0-9_-]+)([&#]|$)'
re_youtube_short='^https?://youtu.be/([A-Za-z0-9_-]+)([?#]|$)'

if (( justaudio )); then
	info "audio-only mode requested"
	rename=1
	options+=(--extract-audio --audio-format m4a)
else
	    options+=(-f best)
fi

# make a canonical URL
if [[ $url =~ $re_youtube_full ]]; then
	url="http://www.youtube.com/watch?v=${BASH_REMATCH[1]}"
elif [[ $url =~ $re_youtube_short ]]; then
	url="http://www.youtube.com/watch?v=${BASH_REMATCH[1]}"
fi
log2 "downloading $url"

# obtain the output filename
file=$(youtube-dl "${options[@]}" --get-filename "$url")
debug "predicted filename: '$(echo "$file" | cat -v)'"
f_name=${file%.*}
f_ext=${file##*.}
if (( rename )) && [[ $m_artist && $m_song ]]; then
	f_name="$m_artist - $m_song"
fi
if [[ "$f_name.$f_ext" != "$file" ]]; then
	file=$f_name.$f_ext
	options+=(--output "${file//%/%%}")
fi
jsonf="$f_name.info.json"

# verify resume
if [[ -s "$file" ]]; then
	old_url=$(getfattr -n "user.xdg.origin.url" --only-values "$file")
	if [[ "$url" != "$old_url" ]]; then
		notice "previous URL was $old_url"
		die "refusing to corrupt existing video"
	fi
fi

# download the video
youtube-dl "${options[@]}" --console-title "$url"
test -s "$file" || die "output file not found"

# note file modification time
mtime=$(stat -c %Y "$file")

# update file tags
log "updating file tags"
if [[ "$kind" ]]; then
	if (( justaudio )); then
		debug "skipping -type for audio-only output"
	else
		tagopts+=(-type "$kind")
	fi
fi
if [[ ! "$m_artist" ]]; then
	m_artist=$(jshon -e uploader -u < "$jsonf")
	tagopts+=(-artist "$m_artist")
fi
if [[ ! "$m_song" ]]; then
	m_song=$f_name
	tagopts+=(-song "$m_song")
fi
t_descr=$(jshon -e description -u < "$jsonf")
if [[ "$t_descr" && "$t_descr" != "No description available." ]]; then
	tagopts+=(-longdesc "$t_descr")
fi
do: mp4tags -xid "youtube:$url" "${tagopts[@]}" "$file"
rm -f "$jsonf"

if [[ "$file" == *.m4a ]]; then
	ftyp=$(ffprobe -show_format "$file" 2>/dev/null | sed -n 's/^TAG:major_brand=//p')
	debug "MP4 container has ftyp '$ftyp'"
	if [[ "$ftyp" == 'isom' ]]; then
		log "fixing container metadata"
		info "found bad ftyp '$ftyp'"
		temp=$(mktemp "tube.XXXXXXXX.$f_ext")
		do: ffmpeg -y -loglevel warning -i "$file" -c copy -brand "M4A " "$temp" && mv "$temp" "$file"
	fi
fi

# set some standard xattrs
{ setfattr -n "user.xdg.origin.url"   -v "$url"   "$file"
  setfattr -n "user.xdg.referrer.url" -v "$url"   "$file"
  setfattr -n "user.created.time"     -v "$mtime" "$file"
} >& /dev/null

# restore file modification time
touch --date="@$mtime" "$file"

# display summary
mp4info "$file"

log "downloaded \"$file\""
if [[ $DISPLAY || $PULSE_SERVER ]]; then
	sound='/usr/share/sounds/freedesktop/stereo/complete.oga'
	if hash paplay
		then paplay "$sound"
	elif hash ogg123
		then ogg123 "$sound"
	elif hash mplayer
		then mplayer "$sound"
	fi &

	: notify -i 'folder-videos' \
		-h category='transfer.complete' \
		-h transient \
		"Download complete" \
		"$file" &
fi < /dev/null >& /dev/null &
