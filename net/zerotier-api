#!/usr/bin/env python
import sys
from copy import copy
from ipaddress import (ip_address, ip_network, ip_interface)
import json
from nullroute.core import *
import nullroute.sec
from pprint import pprint
import requests

class RouteTable(list):
    def find_route(self, target):
        target = ip_network(target)
        for route in self:
            if route["target"] == target.exploded:
                return route

    def del_route(self, target):
        target = ip_network(target)
        for route in self:
            if route["target"] == target.exploded:
                self.remove(route)
                Core.debug("deleting route %r" % route)
                return route

    def add_route(self, target, via=None, metric=0, flags=0):
        target = ip_network(target)
        via = ip_address(via) if via else None
        route = self.del_route(target)
        route = {
            "target": target.exploded,
            "via": via.exploded if via else None,
            "metric": metric,
            "flags": flags,
        }
        Core.debug("adding route %r" % route)
        self.append(route)
        return route

    @property
    def pack(self):
        return list(self)

class ZeroTierNetwork(object):
    def __init__(self, api, net_data):
        self._api = api
        self._data = net_data

    def _refresh(self):
        res = self._api._get("/network/%s" % self.net_id)
        self._data = res
        return res

    def _post_update(self, data):
        data["id"] = self.net_id
        res = self._api._post("/network/%s" % self.net_id, data)

    @property
    def net_id(self):
        return self._data["config"]["nwid"]

    @property
    def name(self):
        return self._data["config"]["name"]

    @property
    def routes(self):
        return self._data["config"]["routes"]

    def add_route(self, target, via=None):
        tab = RouteTable(self.routes)
        tab.add_route(target, via)
        self._post_update({"config": {"routes": tab}})
        self._refresh()

    def add_routes(self, *routes):
        tab = RouteTable(self.routes)
        for route in routes:
            tab.add_route(route["target"], route.get("via"))
        self._post_update({"config": {"routes": tab}})
        self._refresh()

    def del_route(self, target):
        tab = RouteTable(self.routes)
        tab.del_route(target)
        self._post_update({"config": {"routes": tab}})
        self._refresh()

    def __repr__(self):
        return repr(self._data)

class ZeroTierAPI(object):
    BASE = "https://my.zerotier.com/api"

    def __init__(self, token=None):
        self._ua = requests.Session()
        self._token = token or self._get_token()

    def _get_token(self):
        creds = nullroute.sec.get_netrc_service("my.zerotier.com", "api")
        return creds["password"]

    def _get(self, endpoint):
        url = self.BASE + endpoint
        hdr = {"Authorization": "Bearer %s" % self._token}
        res = self._ua.get(url, headers=hdr)
        data = res.json()
        return data

    def _post(self, endpoint, data):
        url = self.BASE + endpoint
        hdr = {"Authorization": "Bearer %s" % self._token}
        res = self._ua.post(url, headers=hdr, json=data)
        data = res.json()
        return data

    def get_self(self):
        return self._get("/self")

    def get_networks(self):
        return self._get("/network")

    def _get_network(self, net_id):
        return self._get("/network/%s" % net_id)

    def get_network(self, net_id):
        data = self._get("/network/%s" % net_id)
        return ZeroTierNetwork(self, data)

    def get_network_members(self, net_id):
        return self._get("/network/%s/member" % net_id)

    def get_network_member(self, net_id, host_id):
        return self._get("/network/%s/member/%s" % (net_id, host_id))

api = ZeroTierAPI()

net_id = "8056c2e21c288b81"
net = api.get_network(net_id)

def cmd_route(cmd, *rest):
    if cmd == "add":
        target, via = rest
        if via == "onlink":
            via = None
        net.add_route(target, via)
    elif cmd == "del":
        target, = rest
        net.del_route(target)
    else:
        for route in net.routes:
            line = "%-43s" % ip_network(route["target"])
            if route["via"]:
                line += " via %s" % ip_address(route["via"])
            else:
                line += " onlink"
            if route["metric"]:
                line += " metric %d" % route["metric"]
            if route["flags"]:
                line += " flags %d" % route["flags"]
            print(line)

def cmd_toplevel(cmd, *rest):
    if cmd == "route":
        rest = rest or [None]
        return cmd_route(*rest)

cmd_toplevel(*sys.argv[1:])
