#!/usr/bin/env python2
# arm - script to search Arch Rollback Machine

from BeautifulSoup import BeautifulSoup
import math
import os
import sys
import urllib

def rangesplit(string, base):
	for m in string.split():
		for n in m.split(","):
			if "-" in n:
				x, y = n.split("-", 1)
				yield int(x, base), int(y, base) + 1
			else:
				yield int(n, base), int(n, base) + 1

def arm_fetch_results(query):
	qry = {"a": 64, "q": query, "core": 1, "extra": 1, "community": 1}
	url = "http://arm.konnichi.com/search/index.php?%s" % urllib.urlencode(qry)
	page = urllib.urlopen(url)
	soup = BeautifulSoup(page)
	for row in soup.body.findAll("div", {"class": "row"}):
		yield row.a.text, row.a["href"]

def arm_search(query):
	for name, url in arm_fetch_results(query):
		if name.endswith(".sig"):
			continue
		else:
			yield name, url

def download_batch(queue):
	progwidth = 20
	def hook(name, btrans, bsize, total):
		btotal = math.ceil(1.0 * total / bsize)
		perc = btrans / btotal * 100
		prog = math.ceil(perc / 100 * progwidth)
		sys.stdout.write(" %3d%% [%-*s] %s\r" % (perc, progwidth, "#" * int(prog), name))
		sys.stdout.flush()

	for name, url in queue:
		sys.stdout.write(" %3d%% [%-*s] %s\r" % (0, progwidth, "", name))
		sys.stdout.flush()

		try:
			urllib.urlretrieve(url, name, lambda *a: hook(name, *a))
		except KeyboardInterrupt:
			sys.stdout.write("\nInterrupted.\n")
			os.unlink(name)
			break
		else:
			sys.stdout.write("\n")
			sys.stdout.flush()

		try:
			urllib.urlretrieve(url+u".sig", name+".sig")
		except KeyboardInterrupt:
			os.unlink(name+".sig")

def search(query):
	packages = list(arm_search(query))
	queue = []

	for i, (name, url) in enumerate(packages):
		print "%3x  %s" % (i, name)

	sel = raw_input("-> ")

	if sel == "q":
		return queue

	try:
		sel = {i for x, y in rangesplit(sel, 16) for i in range(x, y)}
	except ValueError as e:
		print("error: invalid range (%s)" % e.args)
		return []

	for i in sel:
		try:
			queue.append(packages[i])
		except IndexError:
			print("error: choice %r out of range" % i)

	return queue

queue = []

for query in sys.argv[1:]:
	queue += search(query)

download_batch(queue)
