#!/usr/bin/env perl
# cpuctl - hotplug CPUs on Linux
no if $] >= 5.017011, warnings => qw(experimental::smartmatch);
use feature qw(say switch);

sub err {
	say STDERR @_;
	our $err; ++$err;
}

sub uniq (@) { my %seen; grep {!$seen{$_}++} @_; }

sub rangesplit {
	my ($str) = @_;
	my @items;
	for (split /,/, $str) {
		when (/^(\d+)-(\d+)$/) {
			push @items, $1..$2;
		}
		when (/^\d+$/) {
			push @items, $_;
		}
		default {
			err "Not a number: $_";
		}
	}
	return @items;
}

sub put {
	my ($file, $str) = @_;
	if (open my $fh, ">", $file) {
		say $fh $str;
		close $fh;
	} else {
		err "Cannot open $file: $!";
	}
}

sub get {
	my ($file) = @_;
	if (open my $fh, "<", $file) {
		chomp(my $str = <$fh>);
		close $fh;
		return $str;
	} else {
		err "Cannot open $file: $!";
	}
}

sub cpu {
	"/sys/devices/system/cpu/cpu".shift;
}

sub allcpus {
	grep {-e cpu($_)} 0..127;
}

sub allcores {
	uniq map {core_id($_)} allcpus();
}

sub corecpus {
	my ($core) = @_;
	my ($cpu, @cpus);
	if (open my $fh, "<", "/proc/cpuinfo") {
		while (<$fh>) {
			if (/^processor\s*:\s*(\d+)$/) {
				$cpu = $1;
			}
			elsif (/^core id\s*:\s*(\d+)$/ && $1 == $core) {
				push @cpus, $cpu;
			}
		}
		close $fh;
		return @cpus;
	} else {
		err "Cannot open /proc/cpuinfo: $!";
	}
}

sub can_offline {
	my $path = cpu(shift)."/online";
	-e $path ? $path : undef;
}

sub is_online {
	my $path = can_offline(shift);
	$path ? int get($path) : 1;
}

sub core_id {
	my $path = cpu(shift)."/topology/core_id";
	-e $path ? int get($path) : 0;
}

sub put_online {
	my $path = can_offline(shift);
	put($path, shift) if $path;
}

my $cmd = shift(@ARGV);

for ($cmd) {
	when (undef) {
		for (allcpus()) {
			my $core = core_id($_);
			my $status = is_online($_) ? "online" : "offline";
			$status .= " (fixed)" if !can_offline($_);
			say "cpu $_ (core $core): $status";
		}
	}
	when ("online") {
		my @cpus = @ARGV ? map {rangesplit($_)} @ARGV : allcpus();
		@cpus = grep {can_offline($_)} @cpus;
		if (@cpus) {
			say "Onlining CPUs: @cpus";
			put("$_/online", "1") for map {cpu($_)} @cpus;
		} else {
			err "No hotpluggable CPUs given.";
		}
	}
	when ("offline") {
		my @cpus = @ARGV ? map {rangesplit($_)} @ARGV : allcpus();
		@cpus = grep {can_offline($_)} @cpus;
		if (@cpus) {
			say "Offlining CPUs: @cpus";
			put("$_/online", "0") for map {cpu($_)} @cpus;
		} else {
			err "No hotpluggable CPUs given.";
		}
	}
	when ("offline-core") {
		my @cores = @ARGV ? map {rangesplit($_)} @ARGV
			          : grep {$_ > 0} allcores();
		for my $core (@cores) {
			my @cpus = corecpus($core);
			if (@cpus) {
				say "Offlining CPUs: @cpus (core $core)";
				put_online($_, "0") for map {cpu($_)} @cpus;
			}
		}
	}
}

exit !!$err;
