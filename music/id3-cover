#!/usr/bin/env python2
from __future__ import print_function
import sys, os
import getopt
from mutagen import mp3, id3
import nullroute as lib

def trace(msg):
    print(msg, file=sys.stderr)

def usage():
    print("usage:")
    print("    import: cover -i [-f imagefile] audio_file [audio_file ...]")
    print("    export: cover -e [-f imagefile] audio_file")
    print("    remove: cover -x audio_file [audio_file ...]")
    sys.exit(2)

def fileext_to_type(ext):
    return {
        None:   None,
        "jpeg": "image/jpeg",
        "jpg":  "image/jpeg",
        "png":  "image/png",
    }.get(ext[1:], None)

def type_to_fileext(type):
    return {
        None:           None,
        "image/jpeg":   ".jpeg",
        "image/png":    ".png",
    }.get(type, "jpeg")

def export_cover(file, cover_file):
    try:
        filetag = mp3.MP3(file)
    except BaseException as e:
        lib.err(e)
        return False

    if "APIC:" not in filetag:
        lib.err("no cover image (APIC frame not found)")
        return False

    with open(cover_file or "/dev/stdout", "wb") as cover_fh:
        if verbose:
            trace("exporting image: %s" % cover_file)
        cover_fh.write(filetag["APIC:"].data)
    return True

def import_cover(file, image_data, image_type="image/jpeg"):
    TYPE_FRONT_COVER = 3
    ENC_UTF8 = 3

    try:
        filetag = mp3.MP3(file)
    except BaseException as e:
        lib.err(e)
        return False

    filetag.tags.add(id3.APIC(
        data=image_data,
        mime=image_type,
        type=TYPE_FRONT_COVER,
        desc=u"",
        encoding=ENC_UTF8))

    if verbose:
        trace("updating tags: %s" % file)
    try:
        filetag.save()
    except BaseException as e:
        lib.err(e)
        return False
    else:
        return True

def remove_cover(file):
    try:
        filetag = mp3.MP3(file)
    except BaseException as e:
        lib.err(e)
        return False

    if "APIC:" in filetag:
        del filetag["APIC:"]

    if verbose:
        trace("updating tags: %s" % file)
    try:
        filetag.save()
    except BaseException as e:
        lib.err(e)
        return False
    else:
        return True

try:
    options, files = getopt.gnu_getopt(sys.argv[1:], "ef:iovx")
except getopt.GetoptError as e:
    lib.err(e)
    usage()

mode = None
cover_file = None
verbose = os.getenv("DEBUG")

for opt, value in options:
    if   opt == "-e": mode = "export"
    elif opt == "-f": cover_file = value
    elif opt == "-i": mode = "import"
    elif opt == "-o": mode = "export"
    elif opt == "-v": verbose = True
    elif opt == "-x": mode = "kill"

if not mode:
    lib.err("mode not specified")
    usage()

if len(files) < 1:
    lib.err("no .mp3 files specified")
    usage()

if mode == "import":
    if cover_file:
        cover_fh = open(cover_file, 'rb')
        ext = os.path.splitext(cover_file)
        image_type = fileext_to_type(ext)
    else:
        cover_fh = sys.stdin
        image_type = None #"image/jpeg"
    image_data = cover_fh.read()
    for audiofile in files:
        import_cover(audiofile, image_data, image_type)

elif mode == "export":
    if len(files) > 1:
        lib.die("cannot export multiple covers to one file")

    ret = export_cover(files[0], cover_file)

    sys.exit(0 if ret else 1)

elif mode == "kill":
    ret = True

    for audiofile in files:
        ret = remove_cover(audiofile) and ret

    sys.exit(0 if ret else 1)

else:
    lib.die("bad mode %r" % mode)
