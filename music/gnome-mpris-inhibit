#!/usr/bin/env perl
#use warnings;
use strict;
use feature "say";
use Net::DBus;
use Net::DBus::Reactor;
use constant {
	INHIBIT_LOGOUT		=> 1<<0,
	INHIBIT_SWITCH_USER	=> 1<<1,
	INHIBIT_SUSPEND		=> 1<<2,
	INHIBIT_IDLE		=> 1<<3,
};

sub usage {
	say for
	"Usage: gnome-mpris-inhibit <playername>",
	"",
	"Prevents system from automatically going into suspend while music is playing.",
	"",
	"<playername> is the last component of the player's MPRISv2 D-Bus name; for",
	"example, \"banshee\" for \"org.mpris.MediaPlayer2.banshee\".",
	;
	exit(2);
}

my $player = shift(@ARGV) // usage();

if ($player =~ /^-/) {
	usage();
} elsif ($player =~ /^org\.mpris\.MediaPlayer2\.(.+)$/) {
	$player = $1;
} elsif ($player =~ /^org\.mpris\./) {
	warn "error: MPRIS v1 interface is not supported\n";
	exit(1);
}

# Inhibit API settings
my $app_id	= "gnome-mpris-inhibit ($player)";
my $top_xid	= 0;
my $reason	= "Media is playing.";
my $flags	= INHIBIT_IDLE;

# MPRIS variables
my $mp_name	= "org.mpris.MediaPlayer2.$player";
my $cookie	= 0;
my $old_status	= undef;

my $bus = Net::DBus->session;
my $sm;
my $mp;

sub inhibit {
	if ($cookie) {
		warn "$app_id: double inhibit attempted (have cookie $cookie)";
		return;
	}
	$cookie = $sm->Inhibit($app_id, $top_xid, $reason, $flags);
	print "$app_id: inhibit ok ($cookie)\n";
}

sub uninhibit {
	if (!$cookie) {
		warn "$app_id: double uninhibit attempted";
		return;
	}
	$sm->Uninhibit($cookie);
	print "$app_id: uninhibit ok\n";
	$cookie = 0;
}

sub init_watch {
	print "$app_id: started watching\n";

	$sm = $bus->get_service("org.gnome.SessionManager")
			->get_object("/org/gnome/SessionManager");
	$mp = $bus->get_service($mp_name)
			->get_object("/org/mpris/MediaPlayer2");

	# needed due to Clementine exposing broken/incomplete introspection data,
	# lacking signals in particular
	my $mp_prop = $mp->as_interface("org.freedesktop.DBus.Properties");

	$mp_prop->connect_to_signal("PropertiesChanged", sub {
		my ($iface, $changed, $invalidated) = @_;
		if ($iface eq "org.mpris.MediaPlayer2.Player") {
			my $new_status;
			if ("PlaybackStatus" ~~ $changed) {
				$new_status = $changed->{PlaybackStatus};
			} elsif ("PlaybackStatus" ~~ $invalidated) {
				$new_status = $mp->Get("org.mpris.MediaPlayer2.Player",
								"PlaybackStatus");
			} else {
				return;
			}

			print "$app_id: status change: $old_status -> $new_status\n";
			if ($new_status eq $old_status) {
				return;
			} elsif ($new_status eq 'Playing') {
				inhibit();
			} elsif ($old_status eq 'Playing') {
				uninhibit();
			}
			$old_status = $new_status;
		}
	});

	$old_status = $mp->Get("org.mpris.MediaPlayer2.Player", "PlaybackStatus");
	print "$app_id: status currently: $old_status\n";
	if ($old_status eq 'Playing') {
		inhibit();
	}
}

if (defined $bus->get_service_owner($mp_name)) {
	init_watch();
} else {
	my $dbus = $bus->get_service("org.freedesktop.DBus")
			->get_object("/org/freedesktop/DBus");

	$dbus->connect_to_signal("NameOwnerChanged", sub {
		my ($name, $old_owner, $new_owner) = @_;
		if ($name eq $mp_name) {
			if ($old_owner eq "" and $new_owner ne "") {
				print "$app_id: $name claimed\n";
				init_watch();
			} elsif ($old_owner ne "" and $new_owner eq "") {
				print "$app_id: $name disappeared\n";
			}
		}
	});

	print "$app_id: waiting for $mp_name to appear\n";
}

my $reactor = Net::DBus::Reactor->main;
$reactor->run;
exit(0);
# gnome-session takes care of cleanup
