#!/usr/bin/env perl
# mpris - control MPRIS v2 compatible players
# Full spec: http://specifications.freedesktop.org/mpris-spec/latest/
use warnings;
use strict;
use feature qw(say switch);
use Data::Dumper;
use Net::DBus qw(:typing);
use constant {
	DBUS_PROPERTY_IFACE	=> 'org.freedesktop.DBus.Properties',
	MPRIS_MAIN_IFACE	=> 'org.mpris.MediaPlayer2',
	MPRIS_PLAYER_IFACE	=> 'org.mpris.MediaPlayer2.Player',
	MPRIS_PLAYLIST_IFACE	=> 'org.mpris.MediaPlayer2.Playlists',
};

my $bus = Net::DBus->session;

my $prefix_re = qr/^org\.mpris\.MediaPlayer2\./;
my $suffix_re = qr/[^.]+(?:\.instance-?\d+)?$/;

# usage() - print usage text

sub usage {
	say for
	"Usage: mprisctl --list",
	"       mprisctl [<player> [<cmd> [args...]]]",
	"       mprisctl <player> activate",
	"       mprisctl <player> is-running",
	"",
	"This script implements the MPRIS v2.2 specification:",
	"  http://specifications.freedesktop.org/mpris-spec/latest/",
	;
}

# MediaPlayer(busname) - return player service closure
#   ->([optional] object) - return object in service

sub MediaPlayer {
	my $busname = shift;
	my $service = $bus->get_service($busname);
	sub {
		my $path = shift;
		$service->get_object($path // "/org/mpris/MediaPlayer2");
	};
}

# track(num) - return object path for track number

sub track {
	"/org/mpris/MediaPlayer2/Track/".(shift // "1");
}

# saybool(bool) - print "yes"/"no" and exit with boolean status

sub saybool {
	my $b = shift;
	say $b ? "yes" : "no";
	exit !$b;
}

sub int2time {
	my $int = shift // return "âˆž";

	$int = int($int / 1000000);
	$int -= my $s = $int % 60; $int /= 60;
	$int -= my $m = $int % 60; $int /= 60;
	$int -= my $h = $int % 24; $int /= 25;

	$h ? sprintf("%dh%02d:%02d", $h, $m, $s)
	   :  sprintf("%d:%02d", $m, $s);
}

# frombool(str) - booleanize a string

sub dieusage {
	warn shift."\n";
	exit 2;
}

sub frombool {
	my $str = shift;
	my $die = shift // 1;
	given ($str) {
		when (undef) {
			$die ? dieusage "Missing boolean parameter." : undef;
		}
		when (/^(yes|true|on|1)$/i) {
			return dbus_boolean(1);
		}
		when (/^(no|false|off|0)$/i) {
			return dbus_boolean(0);
		}
		default {
			$die ? dieusage "Invalid boolean parameter." : undef;
		}
	}
}

# enumerate() - list MPRISv2 bus names, return suffixes

sub enumerate {
	my $names = $bus->get_bus_object->ListNames();
	sort grep {/$prefix_re/} @$names;
}

# describe(name) - show identity and status of player

sub describe {
	my $name = shift;
	my $player = MediaPlayer($name);
	my $out = $name;

	if ($out =~ /^$prefix_re($suffix_re)/) {
		$out = $1;
	}

	my $identity = eval {$player->()->Get(MPRIS_MAIN_IFACE, "Identity")};
	$out .= " ($identity)" if defined $identity;

	my $status = eval {$player->()->Get(MPRIS_PLAYER_IFACE, "PlaybackStatus")};
	$out .= " - $status" if defined $status;

	say $out;
}

sub checkversion {
	my ($player, $bus_name) = @_;
	if ($bus->get_service_owner($bus_name)) {
	return 1;
	} elsif ($bus->get_service_owner("org.mpris.$player")) {
	warn "The player '$player' is accessible only with a MPRIS v1 name, but this script\n";
	warn "only supports MPRIS v2. Upgrade your player, or use `mpris-remote` instead.\n";
	exit 3;
	} else {
	return 0;
	}
}

sub listplayers {
	my $verbose = shift;
	my @names = enumerate();
	if ($verbose) {
		describe($_) for @names;
		say "No MPRISv2 players are running." if !@names;
	} else {
		say for @names;
	}
}

sub player_getprop {
	my $player = shift;
	my $property = shift;
	given ($property) {
		when (undef) {
			say for qw(
				[APPLICATION]
				can-fullscreen
				can-raise
				can-quit
				desktop
				fullscreen
				has-track-list
				identity
				mime-types
				uri-schemes
				[PLAYER]
				player:can-control
				player:can-go-next
				player:can-go-prev
				player:can-pause
				player:can-play
				player:can-seek
				player:loop-status
				player:metadata
				player:position
				player:position@track
				player:rate
				player:rate-max
				player:rate-min
				player:shuffle
				player:status
				player:volume
				[PLAYLIST]
				playlist:active
			);
		}

		when ("can-fullscreen") {
			saybool eval {$player->()->Get(MPRIS_MAIN_IFACE,
							"CanSetFullscreen")} // 0;
		}
		when ("can-raise") {
			saybool $player->()->Get(MPRIS_MAIN_IFACE, "CanRaise");
		}
		when ("can-quit") {
			saybool $player->()->Get(MPRIS_MAIN_IFACE, "CanQuit");
		}
		when ("desktop") {
			say eval {$player->()->Get(MPRIS_MAIN_IFACE,
							"DesktopEntry")} // "";
		}
		when ("fullscreen") {
			saybool eval {$player->()->Get(MPRIS_MAIN_IFACE,
							"Fullscreen")} // 0;
		}
		when ("has-track-list") {
			saybool $player->()->Get(MPRIS_MAIN_IFACE, "HasTrackList");
		}
		when ("identity") {
			say $player->()->Get(MPRIS_MAIN_IFACE, "Identity");
		}
		when ("mime-types") {
			my $types = $player->()->Get(MPRIS_MAIN_IFACE,
							"SupportedMimeTypes");
			say for @$types;
		}
		when ("uri-schemes") {
			my $schemes = $player->()->Get(MPRIS_MAIN_IFACE,
							"SupportedUriSchemes");
			say for @$schemes;
		}

		# player:

		when ("player:can-control") {
			saybool $player->()->Get(MPRIS_PLAYER_IFACE, "CanControl");
		}
		when ("player:can-go-next") {
			saybool $player->()->Get(MPRIS_PLAYER_IFACE, "CanGoNext");
		}
		when ("player:can-go-prev") {
			saybool $player->()->Get(MPRIS_PLAYER_IFACE, "CanGoPrevious");
		}
		when ("player:can-pause") {
			saybool $player->()->Get(MPRIS_PLAYER_IFACE, "CanPause");
		}
		when ("player:can-play") {
			saybool $player->()->Get(MPRIS_PLAYER_IFACE, "CanPlay");
		}
		when ("player:can-seek") {
			saybool $player->()->Get(MPRIS_PLAYER_IFACE, "CanSeek");
		}
		when ("player:loop-status") {
			say $player->()->Get(MPRIS_PLAYER_IFACE, "LoopStatus");
		}
		when ("player:metadata") {
			my $meta = $player->()->Get(MPRIS_PLAYER_IFACE, "Metadata");
			my @wantkeys = @_ ? @_ : keys(%$meta);
			for my $key (@wantkeys) {
				my $value = $meta->{$key};
				if (!defined $value) {
					say "!${key}";
				}
				elsif (ref $value eq 'ARRAY') {
					say "${key}[]=$_" for @$value;
				}
				elsif (ref $value eq '') {
					say "$key=$value";
				}
				else {
					print Dumper($key, $value);
				}
			}
		}
		when ("player:position") {
			say $player->()->Get(MPRIS_PLAYER_IFACE, "Position");
		}
		when ("player:position\@track") {
			my $pos = $player->()->Get(MPRIS_PLAYER_IFACE, "Position");
			my $meta = $player->()->Get(MPRIS_PLAYER_IFACE, "Metadata");
			my $track = $meta->{"mpris:trackid"};
			if ($track =~ m|^/org/mpris/MediaPlayer2/Track/(\d+)$|) {
				$track = $1;
			}
			say "$pos\@$track";
		}
		when ("player:rate") {
			say $player->()->Get(MPRIS_PLAYER_IFACE, "Rate");
		}
		when ("player:rate-max") {
			say $player->()->Get(MPRIS_PLAYER_IFACE, "MaximumRate");
		}
		when ("player:rate-min") {
			say $player->()->Get(MPRIS_PLAYER_IFACE, "MinimumRate");
		}
		when ("player:shuffle") {
			saybool $player->()->Get(MPRIS_PLAYER_IFACE, "Shuffle");
		}
		when ("player:status") {
			say $player->()->Get(MPRIS_PLAYER_IFACE, "PlaybackStatus");
		}
		when ("player:volume") {
			say $player->()->Get(MPRIS_PLAYER_IFACE, "Volume");
		}

		# playlist:

		when ("playlist:active") {
			my $ret = $player->()->Get(MPRIS_PLAYLIST_IFACE, "ActivePlaylist");
			my ($valid, $struct) = @$ret;
			if ($valid) {
				my ($obj, $name, $icon) = @$struct;
				say "$obj ($name)";
			} else {
				say "/ (no active playlist)";
			}
		}

		default {
			warn "Unknown property '$property'.\n";
			exit 2;
		}
	}
}

sub player_setprop {
	my $player = shift;
	my $property = shift;
	given ($property) {
		when (undef) {
			say for (
				"[APPLICATION]",
				"fullscreen {on|off}",
				"[PLAYER]",
				"player:loop-status {None|Playlist|Track}",
				"player:rate (player:rate-max)~(player:rate-min)",
				"player:position <pos>[@<track>]",
				"player:shuffle {on|off}",
				"player:status {Paused|Playing|Stopped|Toggle}",
				"player:volume 0.0~1.0",
				"[PLAYLIST]",
				"playlist:active <playlist-path>",
			);
		}

		when ("fullscreen") {
			my $arg = frombool(shift);
			$player->()->Set(MPRIS_MAIN_IFACE, "Fullscreen", $arg);
		}

		when ("player:loop-status") {
			my $arg = shift;
			given ($arg) {
				when ([undef, "help"]) {
					say for qw(None Playlist Track);
					exit;
				}
				when (/^(none|off)$/i) {
					$arg = "None";
				}
				when (/^(playlist|all)$/i) {
					$arg = "Playlist";
				}
				when (/^(track|song|single|one)$/i) {
					$arg = "Track";
				}
				default {
					dieusage "Unknown arg status.";
				}
			}
			$player->()->Set(MPRIS_PLAYER_IFACE, "LoopStatus", $arg);
		}
		when ("player:position") {
			my $position = shift;
			my $track;
			if (!defined $position) {
				dieusage "Missing position.";
			} elsif ($position =~ /^(\d+)@(\d+)$/) {
				$position = $1;
				$track = track($2);
			} elsif ($position =~ /^\d+$/) {
				my $meta = $player->()->Get(MPRIS_PLAYER_IFACE,
							"Metadata");
				$track = $meta->{"mpris:trackid"} // track("1");
			} else {
				dieusage "Invalid position.";
			}
			$player->()->SetPosition($track, $position);
		}
		when ("player:rate") {
			my $arg = shift;
			unless (defined $arg) {
				my $min = eval {$player->()->Get(MPRIS_PLAYER_IFACE,
							"MinimumRate")} // 1.0;
				my $max = eval {$player->()->Get(MPRIS_PLAYER_IFACE,
							"MaximumRate")} // 1.0;
				say "$min ... $max";
				exit;
			}
			$arg = dbus_double($arg);
			$player->()->Set(MPRIS_PLAYER_IFACE, "Rate", $arg);
		}
		when ("player:shuffle") {
			my $arg = frombool(shift);
			$player->()->Set(MPRIS_PLAYER_IFACE, "Shuffle", $arg);
		}
		when ("player:status") {
			my $arg = shift;
			given ($arg) {
				when ([undef, "help"]) {
					say for qw(Playing Paused Stopped);
					exit;
				}
				when (/^(paused?)$/i) {
					$player->()->Pause();
				}
				when (/^(play|playing)$/i) {
					$player->()->Play();
				}
				when (/^(stop|stopped)$/i) {
					$player->()->Stop();
				}
				when (/^toggle$/i) {
					$player->()->PlayPause();
				}
				default {
					dieusage "Unknown playback status.";
				}
			}
		}
		when ("player:volume") {
			my $arg = shift;
			if ($arg ~~ [undef, "help"]) {
				say "0.0 .. 1.0";
				exit;
			}
			$arg = dbus_double($arg);
			$player->()->Set(MPRIS_PLAYER_IFACE, "Volume", $arg);
		}

		when ("playlist:active") {
			my $arg = shift;
			unless (defined $arg) {
				my $orderings = $player->()->Get(MPRIS_PLAYLIST_IFACE,
							"Orderings");
				my $playlists = $player->()->GetPlaylists(0, 9999,
							@$orderings[0], dbus_boolean(0));
				for my $playlist (@$playlists) {
					my ($obj, $name, $icon) = @$playlist;
					say "$obj ($name)";
				}
			}
			$player->()->ActivatePlaylist($arg);
		}

		default {
			warn "Cannot set property '$property'.\n";
			exit 2;
		}
	}
}

sub player_doprop {
	my ($property, $player, @args) = @_;
	if (@args) {
		player_setprop($player, $property, @args);
	} else {
		player_getprop($player, $property);
	}
}

sub property {
	my $property = shift;
	return sub {
		player_doprop($property, @_);
	};
}

my %commands = (
	activate => sub {
		# handled by main func
	},
	get => sub {
		player_getprop(@_);
	},
	"is-running" => sub {
		# handled by main func
	},
	meta => sub {
		player_getprop(shift, "player:metadata");
	},
	next => sub {
		shift->()->Next();
	},
	pause => sub {
		shift->()->Pause();
	},
	play => sub {
		shift->()->Play();
	},
	playlists => sub {
		my $player = shift;
		my $orderings = $player->()->Get(MPRIS_PLAYLIST_IFACE, "Orderings");
		my $playlists = $player->()->GetPlaylists(0, 9999,
						@$orderings[0], dbus_boolean(0));
		for my $playlist (@$playlists) {
			my ($obj, $name, $icon) = @$playlist;
			say "$obj ($name)";
		}
	},
	playlist => property("playlist:active"),
	prev => sub {
		shift->()->Previous();
	},
	"open-uri" => sub {
		my $player = shift;
		my $uri = shift;
		if (defined $uri) {
			$player->()->OpenUri($uri);
		} else {
			dieusage "Missing URI.";
		}
	},
	quit => sub {
		shift->()->Quit();
	},
	raise => sub {
		shift->()->Raise();
	},
	repeat => property("player:loop-status"),
	seek => sub {
		my $player = shift;
		my $offset = shift;
		$player->()->Seek($offset * 1_000_000);
	},
	set => sub {
		player_setprop(@_);
	},
	shuffle => property("player:shuffle"),
	status => property("player:status"),
	stop => sub {
		shift->()->Stop();
	},
	summary => sub {
		my $player = shift;
		my $props = $player->()->GetAll(MPRIS_PLAYER_IFACE);
		my $status = $props->{PlaybackStatus};
		if ($status =~ /^(Playing|Paused)$/) {
			my %meta = %{$props->{Metadata}};
			my $pos = int2time($props->{Position} // 0);
			my $len = int2time($meta{"mpris:length"});
			my $artist = $meta{"xesam:artist"} // "Unknown artist";
			if (ref $artist eq 'ARRAY') {
				$artist = join(", ", @$artist);
			}
			my $track = $meta{"xesam:title"} // "Unknown track";
			say "[$status] $artist - $track ($pos/$len)";
		} else {
			say "[$status]";
		}
		my $vol = int (($props->{Volume} // 0) * 100);
		my $loop = lc ($props->{LoopStatus} // "none");
		my $shuf = ($props->{Shuffle} // 0) ? "on" : "off";
		say "(volume: $vol%, repeat: $loop, shuffle: $shuf)";
	},
	toggle => sub {
		shift->()->PlayPause();
	},
);

my $player = shift(@ARGV);
my $cmd = shift(@ARGV);
my $bus_name;

given ($player) {
	when (undef) {
		listplayers(1);
		exit;
	}
	when (/^(-l|--list)/) {
		listplayers(0);
		exit;
	}
	when (/^-/) {
		# other dash-options
		usage();
		exit;
	}
	when (/^$prefix_re/) {
		# full MPRIS v2 bus name
		$bus_name = $player;
	}
	when (/^org\.mpris\.([^.]+)/) {
		# full MPRIS v1 bus name
		warn "\033[1;31mMPRIS v1 is not supported by this script; please use MPRIS v2.\033[m\n";
		$bus_name = "org.mpris.MediaPlayer2.$1";
		if ($bus->get_service_owner($bus_name)) {
			warn "\033[1mWill try MPRISv2 using bus name $bus_name ...\033[m\n";
		} else {
			exit 3;
		}
	}
	when (/^$suffix_re/) {
		# suffix with optional .instance-[PID]
		$bus_name = "org.mpris.MediaPlayer2.$player";
		checkversion($player, $bus_name);
	}
	when (/\./) {
		# possible bus name (at least two components)
		# unlikely but possible: activate a MPRIS player via proprietary name
		# (e.g. Banshee via org.bansheeproject.Banshee)
		$bus_name = $player;
	}
	default {
		# suffix (only one component)
		# NOTE: /^$suffix_re/ above should catch all such instances
		$bus_name = "org.mpris.MediaPlayer2.$player";
		checkversion($player, $bus_name);
	}
}

given ($cmd) {
	when (undef) {
		say for sort keys %commands;
	}
	when ("activate") {
		MediaPlayer($bus_name);
	}
	when ("is-running") {
		saybool $bus->get_service_owner($bus_name);
	}
	default {
		if (!exists $commands{$cmd}) {
			dieusage "Unknown command '$cmd'.";
		}
		elsif (!$bus->get_service_owner($bus_name)) {
			warn "Player $bus_name is not running.\n";
			exit 4;
		}
		else {
			$commands{$cmd}->(MediaPlayer($bus_name), @ARGV);
		}
	}
}
