#!/usr/bin/env python
# SASLproxy v0.2.1
# (c) <grawity@gmail.com>
from __future__ import print_function
import base64
import socket
import ssl
import select

Config = {
    "listen": {
        "addr": ("10.7.0.1", 6667),
        "ipv6": False,
    },
    "connect": {
        #"addr": ("irc.staticbox.net", 6667),
        "addr": ("irc.efnet.fr", 6667),
        "ipv6": False,
        "ssl": False,
    },
    "auth": {
        "user": "",
        "pass": "",
    },
}

def irc_parseline(line):
    line = line.rstrip(b"\r\n")

    if line.startswith(b":"):
        tag, line = line.split(b" ", 1)
        tag = tag[1:]
    else:
        tag = None

    if b" :" in line:
        left, right = line.split(b" :", 1)
        line = left.split(b" ")
        line.append(right)
    else:
        line = line.split(b" ")

    command = line.pop(0).upper()
    return tag, command, line

def sasl_plain():
    authid = Config["auth"]["user"]
    authzid = authid
    passwd = Config["auth"]["pass"]
    data = "%s\0%s\0%s\0" % (authid, authzid, passwd)
    return base64.b64encode(data.encode("utf-8"))

class SASLProxy():
    def __init__(self):
        self.listener = None
        self.client = None
        self.server = None
    
    def listen(self, af, addr):
        self.listener = socket.socket(af, socket.SOCK_STREAM, socket.SOL_TCP)
        self.listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.listener.bind(addr)
        self.listener.listen(1)

    def accept(self):
        self.client, self.client_addr = self.listener.accept()
    
    def connect(self, af, addr):
        self.server = socket.socket(af, socket.SOCK_STREAM, socket.SOL_TCP)
        self.server.connect(addr)
        self.server_host = addr[0]

    def start_ssl(self):
        self.server = ssl.wrap_socket(self.server,
            ca_certs="/etc/ssl/certs/ca-certificates.crt",
            cert_reqs=ssl.CERT_REQUIRED,
            ssl_version=ssl.PROTOCOL_TLSv1)
        cert = self.server.getpeercert()
        print(cert)
    
    def proxy(self):
        client = self.client
        server = self.server
        client_buf = b""
        server_buf = b""
        try:
            while True:
                r, w, x = [client, server], [], []
                r, w, x = select.select(r, w, x)
                for rfd in r:
                    data = rfd.recv(4096)
                    if len(data) == 0:
                        print("Disconnected.")
                        return

                    if rfd is client:
                        print("--> %s" % data)
                        server.send(data)

                    elif rfd is server:
                        lines = (server_buf+data).splitlines(True)
                        if lines[-1].endswith(b"\n"):
                            server_buf = b""
                        else:
                            server_buf = lines.pop()

                        for line in lines:
                            in_tag, in_cmd, in_args = irc_parseline(line)
                            if in_cmd == b"JOIN":
                                line = b":" + in_tag + b" JOIN :" + in_args[0] + b"\r\n"
                            print("<-- %s" % line)
                            client.send(line)

        except KeyboardInterrupt:
            server.send(b"QUIT :Bye.\r\n")
            client.send(b"ERROR :saslproxy was killed\r\n")
            return

Config["listen"].setdefault("ipv6", socket.has_ipv6)
Config["listen"].setdefault("af",
    socket.AF_INET6 if Config["listen"]["ipv6"] else socket.AF_INET)
Config["connect"].setdefault("ipv6", socket.has_ipv6)
Config["connect"].setdefault("af",
    socket.AF_INET6 if Config["connect"]["ipv6"] else socket.AF_INET)

p = SASLProxy()
print("Waiting on", Config["listen"]["addr"])
p.listen(Config["listen"]["af"], Config["listen"]["addr"])
p.accept()
print("Accepted from", p.client_addr)
p.connect(Config["connect"]["af"], Config["connect"]["addr"])
print("Connected to", Config["connect"]["addr"])
if Config["connect"]["ssl"]:
    p.start_ssl()
p.proxy()
