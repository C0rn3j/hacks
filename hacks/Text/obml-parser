#!/usr/bin/env python
# A barebones parser for OBML files used by Opera Mini
#
# Originally intended to extract original URLs from saved pages, after Opera dropped
# binary compatibilty between minor releases and left me with a bunch of unreadable
# saved pages in v15 â€” and it does that.

import os
import sys
import struct

class Parser():
    def __init__(self, path):
        self.path = path
        self.fh = open(path, 'rb')
        self.url_base = "\0"

    def debug(self, typ, data):
        if os.environ.get("DEBUG"):
            print("#", typ, repr(data), file=sys.stderr)
        return data

    def read(self, length):
        buf = self.fh.read(length)
        if len(buf) < length:
            raise IOError("Hit EOF after %d/%d bytes" % (len(buf), length))
        return self.debug("raw[%d]" % length, buf)

    def read_byte(self):
        length = 1
        buf = self.fh.read(length)
        if len(buf) < length:
            raise IOError("Hit EOF after %d/%d bytes" % (len(buf), length))

        data, = struct.unpack('>B', buf)
        return self.debug("byte", data)

    def read_short(self):
        length = 2
        buf = self.fh.read(length)
        if len(buf) < length:
            raise IOError("Hit EOF after %d/%d bytes" % (len(buf), length))

        data, = struct.unpack('>H', buf)
        return self.debug("short", data)

    def read_chunk(self):
        length = self.read_short()
        buf = self.fh.read(length)
        if len(buf) < length:
            raise IOError("Hit EOF after %d/%d bytes" % (len(buf), length))

        return self.debug("chunk[%d]" % length, buf)

    def read_string(self):
        buf = self.read_chunk()
        buf = buf.decode('utf-8')
        return self.debug("-> str[%d]" % len(buf), buf)

    def read_url(self, base=None):
        buf = self.read_string()
        if buf and buf[0] == "\0":
            if not base:
                base = self.url_base
            buf = base + buf[1:]
        return self.debug("-> url[%d]" % len(buf), buf)

def infinity(start=0):
    i = start
    while True:
        yield i
        i += 1

for arg in sys.argv[1:]:
    print("file =", arg)

    f = Parser(arg)

    magic = f.read(4)
    if magic == b'\x02\xd3\x55\x10':
        f.read(3)
        version = f.read_byte()
        f.read_short() # always 240

        if version == 15:
            f.read(8)
        elif version == 16:
            f.read(5)
        else:
            raise IOError('Unknown version %d' % version)

        page_title = f.read_string()
        f.read_chunk() # nil on v16, 'C\x10\x10...' on v15
        page_referer = f.read_string()
        f.url_base = page_referer
        page_url = f.read_url()

        print("title =", page_title)
        print("referer =", page_referer)
        print("url =", page_url)
        print()

        _unk1 = None
        _unk2 = 11
        if arg == "99328453.obml16":
            _unk1 = 174
            _unk2 = 1081
            _ntext = 162 # S \x08\x20 = 8
        elif arg == "56127603.obml16":
            _unk1 = 192
            _ntext = 186 # S \x03\x8e = 2
        elif arg == "90483687.obml16":
            _unk1 = 3325
        else:
            b = f.read(8192)
            p = b.find(b"\x01t")
            print("first pos", p)

        if _unk1:
            print("---unknown---")
            f.read(_unk1)

            print("---links---")
            for i in infinity(start=1):
                print("link", i)
                buf = f.read(16) # \x01t\x00\x00L\x01\x00 ...
                if buf[4:5] in {b"L", b"S"}:
                    link_url = f.read_url()
                    if link_url:
                        print("link =", link_url)
                    else:
                        print("found", i, "links")
                        break
                else: # I, N
                    buf = f.read_chunk()

            print("---unknown---")
            f.read(11)

            print("---text---")
            #for i in infinity(start=1):
            for i in range(100):
                print("text", i+1)
                type = f.read(1)
                f.read(1)
                if type == b"T":
                    # text line
                    buf = f.read(16)
                    if buf[-1] == 0:
                        buf = f.read_string()
                        print(buf)
                    else:
                        f.read(64)
                        print("! giving up"); break
                elif type == b"B":
                    f.read(13)
                elif type == b"I":
                    f.read(24)
                elif type == b"F":
                    f.read(15)
                    f.read_chunk()
                    f.read(8)
                elif type == b"S":
                    f.read(2)
                    for j in range(10): # arbitrary number
                        f.read_chunk()
                    print("! giving up"); break
                else:
                    print("!!! unknown type %r" % type)
                    f.read(128)
                    print("! giving up"); break

            #print("---unknown---")
            #f.read(1081)

    elif magic == b'\x02\xce\x9a\x0c':
        f.read(10)
        page_title = f.read_string()
        f.read_chunk() # nil
        page_url = f.read_string()

        print("title =", page_title)
        print("url =", page_url)
        print()
    else:
        print("error = unrecognized OBML format")
