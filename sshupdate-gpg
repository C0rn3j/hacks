#!/usr/bin/env bash
SOURCE_URL="http://purl.net/net/grawity/misc/authorized_keys.txt"
SIGNER_KEY="D24F6CB2C1B52632"

have() { command -v "$1" &> /dev/null; }

. ~/code/lib/http_fetch.sh || exit 1

recv_key() {
	local keyid=$1
	local server="pool.sks-keyservers.net"
	$VERBOSE && echo "sshup: recv-key $keyid from $server"
	local out=$(gpg --status-fd 1 --keyserver "$server" --recv-key "$keyid" 2>/dev/null)
	if ! grep -qs "^\[GNUPG:\] IMPORT_OK " <<< "$out"; then
		echo "$out" >&2
		return 1
	else
		$VERBOSE && echo "$out"
		return 0
	fi
}

tryfetch() {
	local url=$1 out=$2
	local max_tries=3 retry_wait=3 attempt=0
	while (( ++attempt <= max_tries )); do
		$VERBOSE && echo "Fetching $url (attempt $attempt)"
		if http_fetch "$url" "$out"; then
			return 0
		else
			rm -f "$out"; sleep $retry_wait
		fi
	done
	return 1
}

verify() {
	local file=$1
	local out=$(gpg --status-fd 1 --verify "$file" 2>/dev/null)
	if grep -Eqs "^\[GNUPG:\] (ERROR|NODATA|BADSIG)( |\$)" <<< "$out" ||
		! grep -qs "^\[GNUPG:\] GOODSIG $SIGNER_KEY " <<< "$out" ||
		! grep -qs "^\[GNUPG:\] TRUST_ULTIMATE\$" <<< "$out"
	then
		{ echo "Failed to verify $file"; echo "$out"; } >&2
		return 1
	else
		$VERBOSE && echo "$out"
		return 0
	fi
}

VERBOSE=false
while getopts "hvr" OPT "$@"; do
	case "$OPT" in
	v)	VERBOSE=true ;;
	r)	recv_key "$SIGNER_KEY" && gpg --edit-key "$SIGNER_KEY" trust quit ;;
	esac
done

if ! have gpg; then
	echo "'gpg' not found in \$PATH" >&2
	exit 1
fi

if ! gpg --list-keys "$SIGNER_KEY" &> /dev/null; then
	echo "Signer key $SIGNER_KEY not in keyring" >&2
	exit 1
fi

umask 077
mkdir -p ~/.ssh/

recv_key "$SIGNER_KEY" >&2 || exit 1

temp=$(mktemp ~/.ssh/authorized_keys.XXXXXX)
if ! tryfetch "$SOURCE_URL" "$temp"; then
	echo "Failed to fetch $SOURCE_URL" >&2
	exit 1
fi

if verify "$temp"; then
	{
		echo "# updated $(date +"%Y-%m-%d %H:%M") from $SOURCE_URL"
		gpg --decrypt "$temp" 2> /dev/null
	} > ~/.ssh/authorized_keys
	rm -f "$temp"
fi

if [ -f ~/.ssh/authorized_keys.local ]; then
	{
		echo "# keys from ~/.ssh/authorized_keys.local"
		cat ~/.ssh/authorized_keys.local
	} >> ~/.ssh/authorized_keys
fi
